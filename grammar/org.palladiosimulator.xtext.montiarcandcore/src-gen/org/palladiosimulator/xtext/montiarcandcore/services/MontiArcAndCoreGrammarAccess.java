/*
 * generated by Xtext 2.34.0
 */
package org.palladiosimulator.xtext.montiarcandcore.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MontiArcAndCoreGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class MontiArcAndCoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.MontiArcAndCore");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassdiagramAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClassdiagramClassDiagramCompilationUnitParserRuleCall_0_0 = (RuleCall)cClassdiagramAssignment_0.eContents().get(0);
		private final Assignment cMontiarcdslAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMontiarcdslMACompilationUnitParserRuleCall_1_0 = (RuleCall)cMontiarcdslAssignment_1.eContents().get(0);
		
		//MontiArcAndCore:
		//    classdiagram=ClassDiagramCompilationUnit
		//    montiarcdsl=MACompilationUnit;
		@Override public ParserRule getRule() { return rule; }
		
		//classdiagram=ClassDiagramCompilationUnit
		//montiarcdsl=MACompilationUnit
		public Group getGroup() { return cGroup; }
		
		//classdiagram=ClassDiagramCompilationUnit
		public Assignment getClassdiagramAssignment_0() { return cClassdiagramAssignment_0; }
		
		//ClassDiagramCompilationUnit
		public RuleCall getClassdiagramClassDiagramCompilationUnitParserRuleCall_0_0() { return cClassdiagramClassDiagramCompilationUnitParserRuleCall_0_0; }
		
		//montiarcdsl=MACompilationUnit
		public Assignment getMontiarcdslAssignment_1() { return cMontiarcdslAssignment_1; }
		
		//MACompilationUnit
		public RuleCall getMontiarcdslMACompilationUnitParserRuleCall_1_0() { return cMontiarcdslMACompilationUnitParserRuleCall_1_0; }
	}
	public class ImportStatementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.ImportStatements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportUriAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportUriMCQUALIFIEDNAMETerminalRuleCall_1_0 = (RuleCall)cImportUriAssignment_1.eContents().get(0);
		private final Assignment cStarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStarDOTSTARTerminalRuleCall_2_0 = (RuleCall)cStarAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ImportStatements:
		//    'import' importUri=MCQUALIFIEDNAME star?=DOTSTAR? ";"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importUri=MCQUALIFIEDNAME star?=DOTSTAR? ";"
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importUri=MCQUALIFIEDNAME
		public Assignment getImportUriAssignment_1() { return cImportUriAssignment_1; }
		
		//MCQUALIFIEDNAME
		public RuleCall getImportUriMCQUALIFIEDNAMETerminalRuleCall_1_0() { return cImportUriMCQUALIFIEDNAMETerminalRuleCall_1_0; }
		
		//star?=DOTSTAR?
		public Assignment getStarAssignment_2() { return cStarAssignment_2; }
		
		//DOTSTAR
		public RuleCall getStarDOTSTARTerminalRuleCall_2_0() { return cStarDOTSTARTerminalRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameMCQUALIFIEDNAMETerminalRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_1 = (RuleCall)cNameAlternatives_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Package:
		//    'package' name=(MCQUALIFIEDNAME | ID)';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name=(MCQUALIFIEDNAME | ID)';'
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=(MCQUALIFIEDNAME | ID)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//(MCQUALIFIEDNAME | ID)
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }
		
		//MCQUALIFIEDNAME
		public RuleCall getNameMCQUALIFIEDNAMETerminalRuleCall_1_0_0() { return cNameMCQUALIFIEDNAMETerminalRuleCall_1_0_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_1() { return cNameIDTerminalRuleCall_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMCPrimitiveTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMCArrayTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMCObjectTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMCCollectionTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Type:
		//    MCPrimitiveType | MCArrayType | MCObjectType | MCCollectionType
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MCPrimitiveType | MCArrayType | MCObjectType | MCCollectionType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MCPrimitiveType
		public RuleCall getMCPrimitiveTypeParserRuleCall_0() { return cMCPrimitiveTypeParserRuleCall_0; }
		
		//MCArrayType
		public RuleCall getMCArrayTypeParserRuleCall_1() { return cMCArrayTypeParserRuleCall_1; }
		
		//MCObjectType
		public RuleCall getMCObjectTypeParserRuleCall_2() { return cMCObjectTypeParserRuleCall_2; }
		
		//MCCollectionType
		public RuleCall getMCCollectionTypeParserRuleCall_3() { return cMCCollectionTypeParserRuleCall_3; }
	}
	public class MCPrimitiveTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.MCPrimitiveType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeAlternatives_0 = (Alternatives)cTypeAssignment.eContents().get(0);
		private final Keyword cTypeBooleanKeyword_0_0 = (Keyword)cTypeAlternatives_0.eContents().get(0);
		private final Keyword cTypeByteKeyword_0_1 = (Keyword)cTypeAlternatives_0.eContents().get(1);
		private final Keyword cTypeShortKeyword_0_2 = (Keyword)cTypeAlternatives_0.eContents().get(2);
		private final Keyword cTypeIntKeyword_0_3 = (Keyword)cTypeAlternatives_0.eContents().get(3);
		private final Keyword cTypeLongKeyword_0_4 = (Keyword)cTypeAlternatives_0.eContents().get(4);
		private final Keyword cTypeCharKeyword_0_5 = (Keyword)cTypeAlternatives_0.eContents().get(5);
		private final Keyword cTypeFloatKeyword_0_6 = (Keyword)cTypeAlternatives_0.eContents().get(6);
		private final Keyword cTypeDoubleKeyword_0_7 = (Keyword)cTypeAlternatives_0.eContents().get(7);
		
		//MCPrimitiveType:
		//     type = ( 'boolean' | 'byte' | 'short' | 'int'
		//                  | 'long' | 'char' |'float' | 'double' )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type = ( 'boolean' | 'byte' | 'short' | 'int'
		//             | 'long' | 'char' |'float' | 'double' )
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//( 'boolean' | 'byte' | 'short' | 'int'
		//                 | 'long' | 'char' |'float' | 'double' )
		public Alternatives getTypeAlternatives_0() { return cTypeAlternatives_0; }
		
		//'boolean'
		public Keyword getTypeBooleanKeyword_0_0() { return cTypeBooleanKeyword_0_0; }
		
		//'byte'
		public Keyword getTypeByteKeyword_0_1() { return cTypeByteKeyword_0_1; }
		
		//'short'
		public Keyword getTypeShortKeyword_0_2() { return cTypeShortKeyword_0_2; }
		
		//'int'
		public Keyword getTypeIntKeyword_0_3() { return cTypeIntKeyword_0_3; }
		
		//'long'
		public Keyword getTypeLongKeyword_0_4() { return cTypeLongKeyword_0_4; }
		
		//'char'
		public Keyword getTypeCharKeyword_0_5() { return cTypeCharKeyword_0_5; }
		
		//'float'
		public Keyword getTypeFloatKeyword_0_6() { return cTypeFloatKeyword_0_6; }
		
		//'double'
		public Keyword getTypeDoubleKeyword_0_7() { return cTypeDoubleKeyword_0_7; }
	}
	public class MCObjectTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.MCObjectType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeAlternatives_0 = (Alternatives)cTypeAssignment.eContents().get(0);
		private final Keyword cTypeBooleanKeyword_0_0 = (Keyword)cTypeAlternatives_0.eContents().get(0);
		private final Keyword cTypeByteKeyword_0_1 = (Keyword)cTypeAlternatives_0.eContents().get(1);
		private final Keyword cTypeIntegerKeyword_0_2 = (Keyword)cTypeAlternatives_0.eContents().get(2);
		private final Keyword cTypeLongKeyword_0_3 = (Keyword)cTypeAlternatives_0.eContents().get(3);
		private final Keyword cTypeCharKeyword_0_4 = (Keyword)cTypeAlternatives_0.eContents().get(4);
		private final Keyword cTypeDoubleKeyword_0_5 = (Keyword)cTypeAlternatives_0.eContents().get(5);
		private final Keyword cTypeStringKeyword_0_6 = (Keyword)cTypeAlternatives_0.eContents().get(6);
		
		//MCObjectType:
		//    type = ( 'Boolean' | 'Byte' | 'Integer'
		//                  | 'Long' | 'Char' |'Double' | 'String' )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type = ( 'Boolean' | 'Byte' | 'Integer'
		//              | 'Long' | 'Char' |'Double' | 'String' )
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//( 'Boolean' | 'Byte' | 'Integer'
		//                 | 'Long' | 'Char' |'Double' | 'String' )
		public Alternatives getTypeAlternatives_0() { return cTypeAlternatives_0; }
		
		//'Boolean'
		public Keyword getTypeBooleanKeyword_0_0() { return cTypeBooleanKeyword_0_0; }
		
		//'Byte'
		public Keyword getTypeByteKeyword_0_1() { return cTypeByteKeyword_0_1; }
		
		//'Integer'
		public Keyword getTypeIntegerKeyword_0_2() { return cTypeIntegerKeyword_0_2; }
		
		//'Long'
		public Keyword getTypeLongKeyword_0_3() { return cTypeLongKeyword_0_3; }
		
		//'Char'
		public Keyword getTypeCharKeyword_0_4() { return cTypeCharKeyword_0_4; }
		
		//'Double'
		public Keyword getTypeDoubleKeyword_0_5() { return cTypeDoubleKeyword_0_5; }
		
		//'String'
		public Keyword getTypeStringKeyword_0_6() { return cTypeStringKeyword_0_6; }
	}
	public class MCVoidTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.MCVoidType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cTypeVoidKeyword_0 = (Keyword)cTypeAssignment.eContents().get(0);
		
		//MCVoidType:
		//    type = 'void'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type = 'void'
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//'void'
		public Keyword getTypeVoidKeyword_0() { return cTypeVoidKeyword_0; }
	}
	public class MCCollectionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.MCCollectionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCollectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cCollectionAlternatives_0_0 = (Alternatives)cCollectionAssignment_0.eContents().get(0);
		private final Keyword cCollectionSetKeyword_0_0_0 = (Keyword)cCollectionAlternatives_0_0.eContents().get(0);
		private final Keyword cCollectionListKeyword_0_0_1 = (Keyword)cCollectionAlternatives_0_0.eContents().get(1);
		private final Keyword cCollectionMapKeyword_0_0_2 = (Keyword)cCollectionAlternatives_0_0.eContents().get(2);
		private final Keyword cCollectionOptionalKeyword_0_0_3 = (Keyword)cCollectionAlternatives_0_0.eContents().get(3);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInnerTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInnerTypeTypeParserRuleCall_2_0 = (RuleCall)cInnerTypeAssignment_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MCCollectionType:
		//    collection = ('Set' | 'List' | 'Map' | 'Optional') '<' innerType=Type '>'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//collection = ('Set' | 'List' | 'Map' | 'Optional') '<' innerType=Type '>'
		public Group getGroup() { return cGroup; }
		
		//collection = ('Set' | 'List' | 'Map' | 'Optional')
		public Assignment getCollectionAssignment_0() { return cCollectionAssignment_0; }
		
		//('Set' | 'List' | 'Map' | 'Optional')
		public Alternatives getCollectionAlternatives_0_0() { return cCollectionAlternatives_0_0; }
		
		//'Set'
		public Keyword getCollectionSetKeyword_0_0_0() { return cCollectionSetKeyword_0_0_0; }
		
		//'List'
		public Keyword getCollectionListKeyword_0_0_1() { return cCollectionListKeyword_0_0_1; }
		
		//'Map'
		public Keyword getCollectionMapKeyword_0_0_2() { return cCollectionMapKeyword_0_0_2; }
		
		//'Optional'
		public Keyword getCollectionOptionalKeyword_0_0_3() { return cCollectionOptionalKeyword_0_0_3; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//innerType=Type
		public Assignment getInnerTypeAssignment_2() { return cInnerTypeAssignment_2; }
		
		//Type
		public RuleCall getInnerTypeTypeParserRuleCall_2_0() { return cInnerTypeTypeParserRuleCall_2_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}
	public class MCArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.MCArrayType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMCPrimitiveTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//MCArrayType:
		//    MCPrimitiveType'['']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MCPrimitiveType'['']'
		public Group getGroup() { return cGroup; }
		
		//MCPrimitiveType
		public RuleCall getMCPrimitiveTypeParserRuleCall_0() { return cMCPrimitiveTypeParserRuleCall_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNameExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBinaryExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Expression:
		//    NameExpression | LiteralExpression | BinaryExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//NameExpression | LiteralExpression | BinaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NameExpression
		public RuleCall getNameExpressionParserRuleCall_0() { return cNameExpressionParserRuleCall_0; }
		
		//LiteralExpression
		public RuleCall getLiteralExpressionParserRuleCall_1() { return cLiteralExpressionParserRuleCall_1; }
		
		//BinaryExpression
		public RuleCall getBinaryExpressionParserRuleCall_2() { return cBinaryExpressionParserRuleCall_2; }
	}
	public class LiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.LiteralExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LiteralExpression:
		//    NumberLiteral | StringLiteral
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//NumberLiteral | StringLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_0() { return cNumberLiteralParserRuleCall_0; }
		
		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_1() { return cStringLiteralParserRuleCall_1; }
	}
	public class NumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.NumberLiteral");
		private final Assignment cLiteralAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cLiteralINTTerminalRuleCall_0 = (RuleCall)cLiteralAssignment.eContents().get(0);
		
		//NumberLiteral:
		//  literal=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//literal=INT
		public Assignment getLiteralAssignment() { return cLiteralAssignment; }
		
		//INT
		public RuleCall getLiteralINTTerminalRuleCall_0() { return cLiteralINTTerminalRuleCall_0; }
	}
	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.StringLiteral");
		private final Assignment cLiteralAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cLiteralSTRINGTerminalRuleCall_0 = (RuleCall)cLiteralAssignment.eContents().get(0);
		
		//StringLiteral:
		//    literal=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//literal=STRING
		public Assignment getLiteralAssignment() { return cLiteralAssignment; }
		
		//STRING
		public RuleCall getLiteralSTRINGTerminalRuleCall_0() { return cLiteralSTRINGTerminalRuleCall_0; }
	}
	public class NameExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.NameExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cQualifiednameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cQualifiednameMCQUALIFIEDNAMETerminalRuleCall_1_0 = (RuleCall)cQualifiednameAssignment_1.eContents().get(0);
		
		//NameExpression:
		//    name=ID | qualifiedname=MCQUALIFIEDNAME
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID | qualifiedname=MCQUALIFIEDNAME
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//qualifiedname=MCQUALIFIEDNAME
		public Assignment getQualifiednameAssignment_1() { return cQualifiednameAssignment_1; }
		
		//MCQUALIFIEDNAME
		public RuleCall getQualifiednameMCQUALIFIEDNAMETerminalRuleCall_1_0() { return cQualifiednameMCQUALIFIEDNAMETerminalRuleCall_1_0; }
	}
	public class BinaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.BinaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLiteral1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cLiteral1Alternatives_0_0 = (Alternatives)cLiteral1Assignment_0.eContents().get(0);
		private final RuleCall cLiteral1LiteralExpressionParserRuleCall_0_0_0 = (RuleCall)cLiteral1Alternatives_0_0.eContents().get(0);
		private final RuleCall cLiteral1NameExpressionParserRuleCall_0_0_1 = (RuleCall)cLiteral1Alternatives_0_0.eContents().get(1);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpOperatorEnumRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		private final Assignment cLiteral2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cLiteral2Alternatives_2_0 = (Alternatives)cLiteral2Assignment_2.eContents().get(0);
		private final RuleCall cLiteral2LiteralExpressionParserRuleCall_2_0_0 = (RuleCall)cLiteral2Alternatives_2_0.eContents().get(0);
		private final RuleCall cLiteral2NameExpressionParserRuleCall_2_0_1 = (RuleCall)cLiteral2Alternatives_2_0.eContents().get(1);
		
		//BinaryExpression:
		//    literal1 = (LiteralExpression|NameExpression) op=Operator literal2= (LiteralExpression|NameExpression)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//literal1 = (LiteralExpression|NameExpression) op=Operator literal2= (LiteralExpression|NameExpression)
		public Group getGroup() { return cGroup; }
		
		//literal1 = (LiteralExpression|NameExpression)
		public Assignment getLiteral1Assignment_0() { return cLiteral1Assignment_0; }
		
		//(LiteralExpression|NameExpression)
		public Alternatives getLiteral1Alternatives_0_0() { return cLiteral1Alternatives_0_0; }
		
		//LiteralExpression
		public RuleCall getLiteral1LiteralExpressionParserRuleCall_0_0_0() { return cLiteral1LiteralExpressionParserRuleCall_0_0_0; }
		
		//NameExpression
		public RuleCall getLiteral1NameExpressionParserRuleCall_0_0_1() { return cLiteral1NameExpressionParserRuleCall_0_0_1; }
		
		//op=Operator
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//Operator
		public RuleCall getOpOperatorEnumRuleCall_1_0() { return cOpOperatorEnumRuleCall_1_0; }
		
		//literal2= (LiteralExpression|NameExpression)
		public Assignment getLiteral2Assignment_2() { return cLiteral2Assignment_2; }
		
		//(LiteralExpression|NameExpression)
		public Alternatives getLiteral2Alternatives_2_0() { return cLiteral2Alternatives_2_0; }
		
		//LiteralExpression
		public RuleCall getLiteral2LiteralExpressionParserRuleCall_2_0_0() { return cLiteral2LiteralExpressionParserRuleCall_2_0_0; }
		
		//NameExpression
		public RuleCall getLiteral2NameExpressionParserRuleCall_2_0_1() { return cLiteral2NameExpressionParserRuleCall_2_0_1; }
	}
	public class ArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.Arguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArgumentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentsArgumentParserRuleCall_1_0 = (RuleCall)cArgumentsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArgumentsArgumentParserRuleCall_2_1_0 = (RuleCall)cArgumentsAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Arguments:
		//    '(' arguments+=Argument (',' arguments+=Argument)* ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' arguments+=Argument (',' arguments+=Argument)* ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//arguments+=Argument
		public Assignment getArgumentsAssignment_1() { return cArgumentsAssignment_1; }
		
		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_1_0() { return cArgumentsArgumentParserRuleCall_1_0; }
		
		//(',' arguments+=Argument)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//arguments+=Argument
		public Assignment getArgumentsAssignment_2_1() { return cArgumentsAssignment_2_1; }
		
		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_2_1_0() { return cArgumentsArgumentParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.Argument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//Argument:
		//    name?=ID expression=Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name?=ID expression=Expression
		public Group getGroup() { return cGroup; }
		
		//name?=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}
	public class ClassDiagramCompilationUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.ClassDiagramCompilationUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPackageAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPackagePackageParserRuleCall_0_0 = (RuleCall)cPackageAssignment_0.eContents().get(0);
		private final Assignment cImportStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportStatementsImportStatementsParserRuleCall_1_0 = (RuleCall)cImportStatementsAssignment_1.eContents().get(0);
		private final Assignment cDiagramAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDiagramClassDiagramParserRuleCall_2_0 = (RuleCall)cDiagramAssignment_2.eContents().get(0);
		
		//ClassDiagramCompilationUnit:
		//    package=Package importStatements+=ImportStatements*
		//    diagram=ClassDiagram;
		@Override public ParserRule getRule() { return rule; }
		
		//package=Package importStatements+=ImportStatements*
		//diagram=ClassDiagram
		public Group getGroup() { return cGroup; }
		
		//package=Package
		public Assignment getPackageAssignment_0() { return cPackageAssignment_0; }
		
		//Package
		public RuleCall getPackagePackageParserRuleCall_0_0() { return cPackagePackageParserRuleCall_0_0; }
		
		//importStatements+=ImportStatements*
		public Assignment getImportStatementsAssignment_1() { return cImportStatementsAssignment_1; }
		
		//ImportStatements
		public RuleCall getImportStatementsImportStatementsParserRuleCall_1_0() { return cImportStatementsImportStatementsParserRuleCall_1_0; }
		
		//diagram=ClassDiagram
		public Assignment getDiagramAssignment_2() { return cDiagramAssignment_2; }
		
		//ClassDiagram
		public RuleCall getDiagramClassDiagramParserRuleCall_2_0() { return cDiagramClassDiagramParserRuleCall_2_0; }
	}
	public class ClassDiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.ClassDiagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassdiagramKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCdElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCdElementsCDDefinitionParserRuleCall_3_0 = (RuleCall)cCdElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// ClassDiagram Head
		//ClassDiagram:
		//    "classdiagram" name=ID
		//    "{" cdElements+=CDDefinition* "}"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"classdiagram" name=ID
		//"{" cdElements+=CDDefinition* "}"
		public Group getGroup() { return cGroup; }
		
		//"classdiagram"
		public Keyword getClassdiagramKeyword_0() { return cClassdiagramKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//cdElements+=CDDefinition*
		public Assignment getCdElementsAssignment_3() { return cCdElementsAssignment_3; }
		
		//CDDefinition
		public RuleCall getCdElementsCDDefinitionParserRuleCall_3_0() { return cCdElementsCDDefinitionParserRuleCall_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class CDDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.CDDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCDClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCDEnumParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CDDefinition:
		//    CDClass | CDEnum;
		@Override public ParserRule getRule() { return rule; }
		
		//CDClass | CDEnum
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CDClass
		public RuleCall getCDClassParserRuleCall_0() { return cCDClassParserRuleCall_0; }
		
		//CDEnum
		public RuleCall getCDEnumParserRuleCall_1() { return cCDEnumParserRuleCall_1; }
	}
	public class CDClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.CDClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPublicAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPublicPublicKeyword_0_0 = (Keyword)cPublicAssignment_0.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExtendsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExtendsIDTerminalRuleCall_3_1_0 = (RuleCall)cExtendsAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cImplementsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cImplementsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cImplementsIDTerminalRuleCall_4_1_0 = (RuleCall)cImplementsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cImplementsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cImplementsIDTerminalRuleCall_4_2_1_0 = (RuleCall)cImplementsAssignment_4_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMembersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMembersMemberParserRuleCall_6_0 = (RuleCall)cMembersAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// Class Diagram Body Elements
		//CDClass:
		//    (public?='public')? 'class' name=ID ('extends' extends=ID)? ('implements' implements+=ID (','implements+=ID)*)?'{'
		//        members+=Member*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(public?='public')? 'class' name=ID ('extends' extends=ID)? ('implements' implements+=ID (','implements+=ID)*)?'{'
		//    members+=Member*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//(public?='public')?
		public Assignment getPublicAssignment_0() { return cPublicAssignment_0; }
		
		//'public'
		public Keyword getPublicPublicKeyword_0_0() { return cPublicPublicKeyword_0_0; }
		
		//'class'
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('extends' extends=ID)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'extends'
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }
		
		//extends=ID
		public Assignment getExtendsAssignment_3_1() { return cExtendsAssignment_3_1; }
		
		//ID
		public RuleCall getExtendsIDTerminalRuleCall_3_1_0() { return cExtendsIDTerminalRuleCall_3_1_0; }
		
		//('implements' implements+=ID (','implements+=ID)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'implements'
		public Keyword getImplementsKeyword_4_0() { return cImplementsKeyword_4_0; }
		
		//implements+=ID
		public Assignment getImplementsAssignment_4_1() { return cImplementsAssignment_4_1; }
		
		//ID
		public RuleCall getImplementsIDTerminalRuleCall_4_1_0() { return cImplementsIDTerminalRuleCall_4_1_0; }
		
		//(','implements+=ID)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//implements+=ID
		public Assignment getImplementsAssignment_4_2_1() { return cImplementsAssignment_4_2_1; }
		
		//ID
		public RuleCall getImplementsIDTerminalRuleCall_4_2_1_0() { return cImplementsIDTerminalRuleCall_4_2_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//members+=Member*
		public Assignment getMembersAssignment_6() { return cMembersAssignment_6; }
		
		//Member
		public RuleCall getMembersMemberParserRuleCall_6_0() { return cMembersMemberParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class CDEnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.CDEnum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPublicAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPublicPublicKeyword_0_0 = (Keyword)cPublicAssignment_0.eContents().get(0);
		private final Keyword cEnumKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValuesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValuesIDTerminalRuleCall_4_0 = (RuleCall)cValuesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CDEnum:
		//    (public?='public')? 'enum' name=ID '{'
		//        values+=ID
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(public?='public')? 'enum' name=ID '{'
		//    values+=ID
		//'}'
		public Group getGroup() { return cGroup; }
		
		//(public?='public')?
		public Assignment getPublicAssignment_0() { return cPublicAssignment_0; }
		
		//'public'
		public Keyword getPublicPublicKeyword_0_0() { return cPublicPublicKeyword_0_0; }
		
		//'enum'
		public Keyword getEnumKeyword_1() { return cEnumKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//values+=ID
		public Assignment getValuesAssignment_4() { return cValuesAssignment_4; }
		
		//ID
		public RuleCall getValuesIDTerminalRuleCall_4_0() { return cValuesIDTerminalRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.Member");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cTypeAlternatives_0_0 = (Alternatives)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0_0 = (RuleCall)cTypeAlternatives_0_0.eContents().get(0);
		private final RuleCall cTypeCDDefinitionParserRuleCall_0_0_1 = (RuleCall)cTypeAlternatives_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Member:
		//    type=(Type|CDDefinition) name=ID ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type=(Type|CDDefinition) name=ID ';'
		public Group getGroup() { return cGroup; }
		
		//type=(Type|CDDefinition)
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//(Type|CDDefinition)
		public Alternatives getTypeAlternatives_0_0() { return cTypeAlternatives_0_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0_0() { return cTypeTypeParserRuleCall_0_0_0; }
		
		//CDDefinition
		public RuleCall getTypeCDDefinitionParserRuleCall_0_0_1() { return cTypeCDDefinitionParserRuleCall_0_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class MACompilationUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.MACompilationUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPackageAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPackagePackageParserRuleCall_0_0 = (RuleCall)cPackageAssignment_0.eContents().get(0);
		private final Assignment cImportStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportStatementsImportStatementsParserRuleCall_1_0 = (RuleCall)cImportStatementsAssignment_1.eContents().get(0);
		private final Assignment cComponentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cComponentComponentParserRuleCall_2_0 = (RuleCall)cComponentAssignment_2.eContents().get(0);
		
		//MACompilationUnit:
		//    package=Package importStatements+=ImportStatements*
		//    component=Component;
		@Override public ParserRule getRule() { return rule; }
		
		//package=Package importStatements+=ImportStatements*
		//component=Component
		public Group getGroup() { return cGroup; }
		
		//package=Package
		public Assignment getPackageAssignment_0() { return cPackageAssignment_0; }
		
		//Package
		public RuleCall getPackagePackageParserRuleCall_0_0() { return cPackagePackageParserRuleCall_0_0; }
		
		//importStatements+=ImportStatements*
		public Assignment getImportStatementsAssignment_1() { return cImportStatementsAssignment_1; }
		
		//ImportStatements
		public RuleCall getImportStatementsImportStatementsParserRuleCall_1_0() { return cImportStatementsImportStatementsParserRuleCall_1_0; }
		
		//component=Component
		public Assignment getComponentAssignment_2() { return cComponentAssignment_2; }
		
		//Component
		public RuleCall getComponentComponentParserRuleCall_2_0() { return cComponentComponentParserRuleCall_2_0; }
	}
	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.Component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArcElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArcElementsArcElementParserRuleCall_3_0 = (RuleCall)cArcElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// Component Head
		//Component:
		//    "component" name=ID //signature=Signature
		//    "{" arcElements+=ArcElement* "}"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"component" name=ID //signature=Signature
		//"{" arcElements+=ArcElement* "}"
		public Group getGroup() { return cGroup; }
		
		//"component"
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		////signature=Signature
		//   "{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//arcElements+=ArcElement*
		public Assignment getArcElementsAssignment_3() { return cArcElementsAssignment_3; }
		
		//ArcElement
		public RuleCall getArcElementsArcElementParserRuleCall_3_0() { return cArcElementsArcElementParserRuleCall_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.Signature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSignatureAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cParametersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParametersParametersParserRuleCall_1_0 = (RuleCall)cParametersAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		
		//Signature:
		//    {Signature} parameters?=Parameters? ("extends" type?=Type)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Signature} parameters?=Parameters? ("extends" type?=Type)?
		public Group getGroup() { return cGroup; }
		
		//{Signature}
		public Action getSignatureAction_0() { return cSignatureAction_0; }
		
		//parameters?=Parameters?
		public Assignment getParametersAssignment_1() { return cParametersAssignment_1; }
		
		//Parameters
		public RuleCall getParametersParametersParserRuleCall_1_0() { return cParametersParametersParserRuleCall_1_0; }
		
		//("extends" type?=Type)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//type?=Type
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_1_0() { return cTypeTypeParserRuleCall_2_1_0; }
	}
	public class ParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.Parameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		
		//Parameters:
		//    parameters+=Parameter ("," parameters+=Parameter)*;
		@Override public ParserRule getRule() { return rule; }
		
		//parameters+=Parameter ("," parameters+=Parameter)*
		public Group getGroup() { return cGroup; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_0_0() { return cParametersParameterParserRuleCall_0_0; }
		
		//("," parameters+=Parameter)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_1_1_0() { return cParametersParameterParserRuleCall_1_1_0; }
	}
	public class ComponentTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.ComponentType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTypeComponentCrossReference_0 = (CrossReference)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeComponentIDTerminalRuleCall_0_1 = (RuleCall)cTypeComponentCrossReference_0.eContents().get(1);
		
		//ComponentType:
		//    type = ([Component])
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type = ([Component])
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//([Component])
		public CrossReference getTypeComponentCrossReference_0() { return cTypeComponentCrossReference_0; }
		
		//ID
		public RuleCall getTypeComponentIDTerminalRuleCall_0_1() { return cTypeComponentIDTerminalRuleCall_0_1; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionAssignment_2_1.eContents().get(0);
		
		//Parameter:
		//    type=Type name=ID ("=" expression?=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type name=ID ("=" expression?=Expression)?
		public Group getGroup() { return cGroup; }
		
		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//("=" expression?=Expression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//expression?=Expression
		public Assignment getExpressionAssignment_2_1() { return cExpressionAssignment_2_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_1_0() { return cExpressionExpressionParserRuleCall_2_1_0; }
	}
	public class ArcElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.ArcElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComponentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubComponentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConnectorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPortParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cVariableParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAutomatonParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//ArcElement:
		//    Component | SubComponent | Connector | Port | Variable | Automaton;
		@Override public ParserRule getRule() { return rule; }
		
		//Component | SubComponent | Connector | Port | Variable | Automaton
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Component
		public RuleCall getComponentParserRuleCall_0() { return cComponentParserRuleCall_0; }
		
		//SubComponent
		public RuleCall getSubComponentParserRuleCall_1() { return cSubComponentParserRuleCall_1; }
		
		//Connector
		public RuleCall getConnectorParserRuleCall_2() { return cConnectorParserRuleCall_2; }
		
		//Port
		public RuleCall getPortParserRuleCall_3() { return cPortParserRuleCall_3; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_4() { return cVariableParserRuleCall_4; }
		
		//Automaton
		public RuleCall getAutomatonParserRuleCall_5() { return cAutomatonParserRuleCall_5; }
	}
	public class SubComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.SubComponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentsArgumentsParserRuleCall_2_0 = (RuleCall)cArgumentsAssignment_2.eContents().get(0);
		private final Assignment cInstancesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInstancesNamesParserRuleCall_3_0 = (RuleCall)cInstancesAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// Component Body Elements
		//SubComponent:
		//    "component" type=Type arguments?=Arguments? instances=Names ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"component" type=Type arguments?=Arguments? instances=Names ";"
		public Group getGroup() { return cGroup; }
		
		//"component"
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
		
		//arguments?=Arguments?
		public Assignment getArgumentsAssignment_2() { return cArgumentsAssignment_2; }
		
		//Arguments
		public RuleCall getArgumentsArgumentsParserRuleCall_2_0() { return cArgumentsArgumentsParserRuleCall_2_0; }
		
		//instances=Names
		public Assignment getInstancesAssignment_3() { return cInstancesAssignment_3; }
		
		//Names
		public RuleCall getInstancesNamesParserRuleCall_3_0() { return cInstancesNamesParserRuleCall_3_0; }
		
		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ConnectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.Connector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cSourceAlternatives_0_0 = (Alternatives)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceIDTerminalRuleCall_0_0_0 = (RuleCall)cSourceAlternatives_0_0.eContents().get(0);
		private final RuleCall cSourceMCQUALIFIEDNAMETerminalRuleCall_0_0_1 = (RuleCall)cSourceAlternatives_0_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cTargetAlternatives_2_0 = (Alternatives)cTargetAssignment_2.eContents().get(0);
		private final RuleCall cTargetIDTerminalRuleCall_2_0_0 = (RuleCall)cTargetAlternatives_2_0.eContents().get(0);
		private final RuleCall cTargetMCQUALIFIEDNAMETerminalRuleCall_2_0_1 = (RuleCall)cTargetAlternatives_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Connector:
		//    source=(ID|MCQUALIFIEDNAME) "->" target=(ID|MCQUALIFIEDNAME) ";";
		@Override public ParserRule getRule() { return rule; }
		
		//source=(ID|MCQUALIFIEDNAME) "->" target=(ID|MCQUALIFIEDNAME) ";"
		public Group getGroup() { return cGroup; }
		
		//source=(ID|MCQUALIFIEDNAME)
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//(ID|MCQUALIFIEDNAME)
		public Alternatives getSourceAlternatives_0_0() { return cSourceAlternatives_0_0; }
		
		//ID
		public RuleCall getSourceIDTerminalRuleCall_0_0_0() { return cSourceIDTerminalRuleCall_0_0_0; }
		
		//MCQUALIFIEDNAME
		public RuleCall getSourceMCQUALIFIEDNAMETerminalRuleCall_0_0_1() { return cSourceMCQUALIFIEDNAMETerminalRuleCall_0_0_1; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//target=(ID|MCQUALIFIEDNAME)
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }
		
		//(ID|MCQUALIFIEDNAME)
		public Alternatives getTargetAlternatives_2_0() { return cTargetAlternatives_2_0; }
		
		//ID
		public RuleCall getTargetIDTerminalRuleCall_2_0_0() { return cTargetIDTerminalRuleCall_2_0_0; }
		
		//MCQUALIFIEDNAME
		public RuleCall getTargetMCQUALIFIEDNAMETerminalRuleCall_2_0_1() { return cTargetMCQUALIFIEDNAMETerminalRuleCall_2_0_1; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class PortsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.Ports");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPortKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPortsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPortsPortParserRuleCall_1_0 = (RuleCall)cPortsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPortsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPortsPortParserRuleCall_2_1_0 = (RuleCall)cPortsAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Ports:
		//    "port" ports+=Port ("," ports+=Port)* ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"port" ports+=Port ("," ports+=Port)* ";"
		public Group getGroup() { return cGroup; }
		
		//"port"
		public Keyword getPortKeyword_0() { return cPortKeyword_0; }
		
		//ports+=Port
		public Assignment getPortsAssignment_1() { return cPortsAssignment_1; }
		
		//Port
		public RuleCall getPortsPortParserRuleCall_1_0() { return cPortsPortParserRuleCall_1_0; }
		
		//("," ports+=Port)*
		public Group getGroup_2() { return cGroup_2; }
		
		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//ports+=Port
		public Assignment getPortsAssignment_2_1() { return cPortsAssignment_2_1; }
		
		//Port
		public RuleCall getPortsPortParserRuleCall_2_1_0() { return cPortsPortParserRuleCall_2_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.Port");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPortKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cInAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cInInKeyword_2_0_0 = (Keyword)cInAssignment_2_0.eContents().get(0);
		private final Assignment cOutAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cOutOutKeyword_2_1_0 = (Keyword)cOutAssignment_2_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_3_0_0 = (RuleCall)cTypeAssignment_3_0.eContents().get(0);
		private final Assignment cDataTypeAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final CrossReference cDataTypeCDDefinitionCrossReference_3_1_0 = (CrossReference)cDataTypeAssignment_3_1.eContents().get(0);
		private final RuleCall cDataTypeCDDefinitionIDTerminalRuleCall_3_1_0_1 = (RuleCall)cDataTypeCDDefinitionCrossReference_3_1_0.eContents().get(1);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cNameAlternatives_4_0 = (Alternatives)cNameAssignment_4.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_4_0_0 = (RuleCall)cNameAlternatives_4_0.eContents().get(0);
		private final RuleCall cNameMCQUALIFIEDNAMETerminalRuleCall_4_0_1 = (RuleCall)cNameAlternatives_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Port:
		//    "port" (condition=Condition)?(in?="in" | out?="out") (type=Type|dataType=([CDDefinition])) name=(ID|MCQUALIFIEDNAME) ";"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"port" (condition=Condition)?(in?="in" | out?="out") (type=Type|dataType=([CDDefinition])) name=(ID|MCQUALIFIEDNAME) ";"
		public Group getGroup() { return cGroup; }
		
		//"port"
		public Keyword getPortKeyword_0() { return cPortKeyword_0; }
		
		//(condition=Condition)?
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_1_0() { return cConditionConditionParserRuleCall_1_0; }
		
		//(in?="in" | out?="out")
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//in?="in"
		public Assignment getInAssignment_2_0() { return cInAssignment_2_0; }
		
		//"in"
		public Keyword getInInKeyword_2_0_0() { return cInInKeyword_2_0_0; }
		
		//out?="out"
		public Assignment getOutAssignment_2_1() { return cOutAssignment_2_1; }
		
		//"out"
		public Keyword getOutOutKeyword_2_1_0() { return cOutOutKeyword_2_1_0; }
		
		//(type=Type|dataType=([CDDefinition]))
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//type=Type
		public Assignment getTypeAssignment_3_0() { return cTypeAssignment_3_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_3_0_0() { return cTypeTypeParserRuleCall_3_0_0; }
		
		//dataType=([CDDefinition])
		public Assignment getDataTypeAssignment_3_1() { return cDataTypeAssignment_3_1; }
		
		//([CDDefinition])
		public CrossReference getDataTypeCDDefinitionCrossReference_3_1_0() { return cDataTypeCDDefinitionCrossReference_3_1_0; }
		
		//ID
		public RuleCall getDataTypeCDDefinitionIDTerminalRuleCall_3_1_0_1() { return cDataTypeCDDefinitionIDTerminalRuleCall_3_1_0_1; }
		
		//name=(ID|MCQUALIFIEDNAME)
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//(ID|MCQUALIFIEDNAME)
		public Alternatives getNameAlternatives_4_0() { return cNameAlternatives_4_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0_0() { return cNameIDTerminalRuleCall_4_0_0; }
		
		//MCQUALIFIEDNAME
		public RuleCall getNameMCQUALIFIEDNAMETerminalRuleCall_4_0_1() { return cNameMCQUALIFIEDNAMETerminalRuleCall_4_0_1; }
		
		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cConditionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionSTRINGTerminalRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Condition:
		//    '<<''condition' '=' condition=STRING '>>'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'<<''condition' '=' condition=STRING '>>'
		public Group getGroup() { return cGroup; }
		
		//'<<'
		public Keyword getLessThanSignLessThanSignKeyword_0() { return cLessThanSignLessThanSignKeyword_0; }
		
		//'condition'
		public Keyword getConditionKeyword_1() { return cConditionKeyword_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//condition=STRING
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }
		
		//STRING
		public RuleCall getConditionSTRINGTerminalRuleCall_3_0() { return cConditionSTRINGTerminalRuleCall_3_0; }
		
		//'>>'
		public Keyword getGreaterThanSignGreaterThanSignKeyword_4() { return cGreaterThanSignGreaterThanSignKeyword_4; }
	}
	public class NamesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.Names");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cNamesAlternatives_0_0 = (Alternatives)cNamesAssignment_0.eContents().get(0);
		private final RuleCall cNamesIDTerminalRuleCall_0_0_0 = (RuleCall)cNamesAlternatives_0_0.eContents().get(0);
		private final RuleCall cNamesMCQUALIFIEDNAMETerminalRuleCall_0_0_1 = (RuleCall)cNamesAlternatives_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNamesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cNamesAlternatives_1_1_0 = (Alternatives)cNamesAssignment_1_1.eContents().get(0);
		private final RuleCall cNamesIDTerminalRuleCall_1_1_0_0 = (RuleCall)cNamesAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cNamesMCQUALIFIEDNAMETerminalRuleCall_1_1_0_1 = (RuleCall)cNamesAlternatives_1_1_0.eContents().get(1);
		
		//Names:
		//    names+=(ID|MCQUALIFIEDNAME) ("," names+=(ID|MCQUALIFIEDNAME))*;
		@Override public ParserRule getRule() { return rule; }
		
		//names+=(ID|MCQUALIFIEDNAME) ("," names+=(ID|MCQUALIFIEDNAME))*
		public Group getGroup() { return cGroup; }
		
		//names+=(ID|MCQUALIFIEDNAME)
		public Assignment getNamesAssignment_0() { return cNamesAssignment_0; }
		
		//(ID|MCQUALIFIEDNAME)
		public Alternatives getNamesAlternatives_0_0() { return cNamesAlternatives_0_0; }
		
		//ID
		public RuleCall getNamesIDTerminalRuleCall_0_0_0() { return cNamesIDTerminalRuleCall_0_0_0; }
		
		//MCQUALIFIEDNAME
		public RuleCall getNamesMCQUALIFIEDNAMETerminalRuleCall_0_0_1() { return cNamesMCQUALIFIEDNAMETerminalRuleCall_0_0_1; }
		
		//("," names+=(ID|MCQUALIFIEDNAME))*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//names+=(ID|MCQUALIFIEDNAME)
		public Assignment getNamesAssignment_1_1() { return cNamesAssignment_1_1; }
		
		//(ID|MCQUALIFIEDNAME)
		public Alternatives getNamesAlternatives_1_1_0() { return cNamesAlternatives_1_1_0; }
		
		//ID
		public RuleCall getNamesIDTerminalRuleCall_1_1_0_0() { return cNamesIDTerminalRuleCall_1_1_0_0; }
		
		//MCQUALIFIEDNAME
		public RuleCall getNamesMCQUALIFIEDNAMETerminalRuleCall_1_1_0_1() { return cNamesMCQUALIFIEDNAMETerminalRuleCall_1_1_0_1; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeComponentCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeComponentIDTerminalRuleCall_0_0_1 = (RuleCall)cTypeComponentCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cNameMCQUALIFIEDNAMETerminalRuleCall_1_0_1 = (RuleCall)cNameAlternatives_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Variable:
		//    type=([Component]) name=(ID|MCQUALIFIEDNAME) ";"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//type=([Component]) name=(ID|MCQUALIFIEDNAME) ";"
		public Group getGroup() { return cGroup; }
		
		//type=([Component])
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//([Component])
		public CrossReference getTypeComponentCrossReference_0_0() { return cTypeComponentCrossReference_0_0; }
		
		//ID
		public RuleCall getTypeComponentIDTerminalRuleCall_0_0_1() { return cTypeComponentIDTerminalRuleCall_0_0_1; }
		
		//name=(ID|MCQUALIFIEDNAME)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//(ID|MCQUALIFIEDNAME)
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//MCQUALIFIEDNAME
		public RuleCall getNameMCQUALIFIEDNAMETerminalRuleCall_1_0_1() { return cNameMCQUALIFIEDNAMETerminalRuleCall_1_0_1; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class AutomatonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.Automaton");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAutomatonAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSyncAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSyncSYNCTerminalRuleCall_1_0 = (RuleCall)cSyncAssignment_1.eContents().get(0);
		private final Keyword cAutomatonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cStatesAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cStatesStateParserRuleCall_5_0_0 = (RuleCall)cStatesAssignment_5_0.eContents().get(0);
		private final Assignment cTransitionsAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cTransitionsTransitionParserRuleCall_5_1_0 = (RuleCall)cTransitionsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// Embedded Behavior Elements
		////Variable:
		////    type=(Type|ComponentType) names?=Names? ('('parameters+=Expression(','parameters+=Expression)*')')?";";
		//Automaton:
		//    {Automaton} (sync?=SYNC)? "automaton" name?=ID? "{" (states+=State |
		//    transitions+=Transition)* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//{Automaton} (sync?=SYNC)? "automaton" name?=ID? "{" (states+=State |
		//transitions+=Transition)* "}"
		public Group getGroup() { return cGroup; }
		
		//{Automaton}
		public Action getAutomatonAction_0() { return cAutomatonAction_0; }
		
		//(sync?=SYNC)?
		public Assignment getSyncAssignment_1() { return cSyncAssignment_1; }
		
		//SYNC
		public RuleCall getSyncSYNCTerminalRuleCall_1_0() { return cSyncSYNCTerminalRuleCall_1_0; }
		
		//"automaton"
		public Keyword getAutomatonKeyword_2() { return cAutomatonKeyword_2; }
		
		//name?=ID?
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(states+=State |
		//   transitions+=Transition)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//states+=State
		public Assignment getStatesAssignment_5_0() { return cStatesAssignment_5_0; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_5_0_0() { return cStatesStateParserRuleCall_5_0_0; }
		
		//transitions+=Transition
		public Assignment getTransitionsAssignment_5_1() { return cTransitionsAssignment_5_1; }
		
		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_5_1_0() { return cTransitionsTransitionParserRuleCall_5_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.State");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSCStateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInvStateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//State:
		//    SCState | InvState
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SCState | InvState
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SCState
		public RuleCall getSCStateParserRuleCall_0() { return cSCStateParserRuleCall_0; }
		
		//InvState
		public RuleCall getInvStateParserRuleCall_1() { return cInvStateParserRuleCall_1; }
	}
	public class SCStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.SCState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifierSCModifierEnumRuleCall_0_0 = (RuleCall)cModifierAssignment_0.eContents().get(0);
		private final Assignment cAnteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnteSCSAnteParserRuleCall_1_0 = (RuleCall)cAnteAssignment_1.eContents().get(0);
		private final Keyword cStateKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SCState:
		//    (modifier+=SCModifier)* (ante=SCSAnte)? "state" name=ID ";";
		@Override public ParserRule getRule() { return rule; }
		
		//(modifier+=SCModifier)* (ante=SCSAnte)? "state" name=ID ";"
		public Group getGroup() { return cGroup; }
		
		//(modifier+=SCModifier)*
		public Assignment getModifierAssignment_0() { return cModifierAssignment_0; }
		
		//SCModifier
		public RuleCall getModifierSCModifierEnumRuleCall_0_0() { return cModifierSCModifierEnumRuleCall_0_0; }
		
		//(ante=SCSAnte)?
		public Assignment getAnteAssignment_1() { return cAnteAssignment_1; }
		
		//SCSAnte
		public RuleCall getAnteSCSAnteParserRuleCall_1_0() { return cAnteSCSAnteParserRuleCall_1_0; }
		
		//"state"
		public Keyword getStateKeyword_2() { return cStateKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class InvStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.InvState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifierSCModifierEnumRuleCall_0_0 = (RuleCall)cModifierAssignment_0.eContents().get(0);
		private final Keyword cStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//InvState:
		//    (modifier+=SCModifier)* "state" name=ID '[' expression=Expression ']'";";
		@Override public ParserRule getRule() { return rule; }
		
		//(modifier+=SCModifier)* "state" name=ID '[' expression=Expression ']'";"
		public Group getGroup() { return cGroup; }
		
		//(modifier+=SCModifier)*
		public Assignment getModifierAssignment_0() { return cModifierAssignment_0; }
		
		//SCModifier
		public RuleCall getModifierSCModifierEnumRuleCall_0_0() { return cModifierSCModifierEnumRuleCall_0_0; }
		
		//"state"
		public Keyword getStateKeyword_1() { return cStateKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
		
		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class SCSAnteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.SCSAnte");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSCSAnteAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		//SCSAnte:
		//    {SCSAnte} (block=Block)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SCSAnte} (block=Block)
		public Group getGroup() { return cGroup; }
		
		//{SCSAnte}
		public Action getSCSAnteAction_0() { return cSCSAnteAction_0; }
		
		//(block=Block)
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_1_0() { return cBlockBlockParserRuleCall_1_0; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceStateCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceStateIDTerminalRuleCall_0_0_1 = (RuleCall)cSourceStateCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTargetAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cTargetStateCrossReference_1_1_0 = (CrossReference)cTargetAssignment_1_1.eContents().get(0);
		private final RuleCall cTargetStateIDTerminalRuleCall_1_1_0_1 = (RuleCall)cTargetStateCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSolidusKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cReactionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cReactionBlockParserRuleCall_3_1_0 = (RuleCall)cReactionAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Transition:
		//    source=[State] ("->" target=[State])?
		//    ("[" expression=Expression "]")?("/" reaction=Block)?";";
		@Override public ParserRule getRule() { return rule; }
		
		//source=[State] ("->" target=[State])?
		//("[" expression=Expression "]")?("/" reaction=Block)?";"
		public Group getGroup() { return cGroup; }
		
		//source=[State]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[State]
		public CrossReference getSourceStateCrossReference_0_0() { return cSourceStateCrossReference_0_0; }
		
		//ID
		public RuleCall getSourceStateIDTerminalRuleCall_0_0_1() { return cSourceStateIDTerminalRuleCall_0_0_1; }
		
		//("->" target=[State])?
		public Group getGroup_1() { return cGroup_1; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_0() { return cHyphenMinusGreaterThanSignKeyword_1_0; }
		
		//target=[State]
		public Assignment getTargetAssignment_1_1() { return cTargetAssignment_1_1; }
		
		//[State]
		public CrossReference getTargetStateCrossReference_1_1_0() { return cTargetStateCrossReference_1_1_0; }
		
		//ID
		public RuleCall getTargetStateIDTerminalRuleCall_1_1_0_1() { return cTargetStateIDTerminalRuleCall_1_1_0_1; }
		
		//("[" expression=Expression "]")?
		public Group getGroup_2() { return cGroup_2; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2_1() { return cExpressionAssignment_2_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_1_0() { return cExpressionExpressionParserRuleCall_2_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
		
		//("/" reaction=Block)?
		public Group getGroup_3() { return cGroup_3; }
		
		//"/"
		public Keyword getSolidusKeyword_3_0() { return cSolidusKeyword_3_0; }
		
		//reaction=Block
		public Assignment getReactionAssignment_3_1() { return cReactionAssignment_3_1; }
		
		//Block
		public RuleCall getReactionBlockParserRuleCall_3_1_0() { return cReactionBlockParserRuleCall_3_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBlocksAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlocksBlockStatementParserRuleCall_2_0 = (RuleCall)cBlocksAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Block:
		//    {Block} '{' blocks+=BlockStatement* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Block} '{' blocks+=BlockStatement* '}'
		public Group getGroup() { return cGroup; }
		
		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//blocks+=BlockStatement*
		public Assignment getBlocksAssignment_2() { return cBlocksAssignment_2; }
		
		//BlockStatement
		public RuleCall getBlocksBlockStatementParserRuleCall_2_0() { return cBlocksBlockStatementParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class BlockStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.BlockStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleInitParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSimpleExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BlockStatement:
		//    SimpleInit | SimpleExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleInit | SimpleExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleInit
		public RuleCall getSimpleInitParserRuleCall_0() { return cSimpleInitParserRuleCall_0; }
		
		//SimpleExpression
		public RuleCall getSimpleExpressionParserRuleCall_1() { return cSimpleExpressionParserRuleCall_1; }
	}
	public class SimpleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.SimpleExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SimpleExpression:
		//    expression=Expression ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//expression=Expression ';'
		public Group getGroup() { return cGroup; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_0() { return cExpressionExpressionParserRuleCall_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class SimpleInitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.SimpleInit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionsExpressionParserRuleCall_2_0 = (RuleCall)cExpressionsAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SimpleInit:
		//    name=ID "=" expressions+=Expression';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID "=" expressions+=Expression';'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//expressions+=Expression
		public Assignment getExpressionsAssignment_2() { return cExpressionsAssignment_2; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_2_0() { return cExpressionsExpressionParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	
	public class OperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGTGreaterThanSignKeyword_0_0 = (Keyword)cGTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLTLessThanSignKeyword_1_0 = (Keyword)cLTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEQEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEQEqualsSignEqualsSignKeyword_2_0 = (Keyword)cEQEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cBAEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cBAAmpersandAmpersandKeyword_3_0 = (Keyword)cBAEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cPLUSEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cPLUSPlusSignKeyword_4_0 = (Keyword)cPLUSEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cMINUSEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cMINUSHyphenMinusKeyword_5_0 = (Keyword)cMINUSEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cDIVEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cDIVSolidusKeyword_6_0 = (Keyword)cDIVEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cMULTEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cMULTAsteriskKeyword_7_0 = (Keyword)cMULTEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum Operator:
		//    GT='>'| LT='<' | EQ='==' | BA='&&' | PLUS='+' | MINUS='-' | DIV='/' | MULT='*'
		//;
		public EnumRule getRule() { return rule; }
		
		//GT='>'| LT='<' | EQ='==' | BA='&&' | PLUS='+' | MINUS='-' | DIV='/' | MULT='*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GT='>'
		public EnumLiteralDeclaration getGTEnumLiteralDeclaration_0() { return cGTEnumLiteralDeclaration_0; }
		
		//'>'
		public Keyword getGTGreaterThanSignKeyword_0_0() { return cGTGreaterThanSignKeyword_0_0; }
		
		//LT='<'
		public EnumLiteralDeclaration getLTEnumLiteralDeclaration_1() { return cLTEnumLiteralDeclaration_1; }
		
		//'<'
		public Keyword getLTLessThanSignKeyword_1_0() { return cLTLessThanSignKeyword_1_0; }
		
		//EQ='=='
		public EnumLiteralDeclaration getEQEnumLiteralDeclaration_2() { return cEQEnumLiteralDeclaration_2; }
		
		//'=='
		public Keyword getEQEqualsSignEqualsSignKeyword_2_0() { return cEQEqualsSignEqualsSignKeyword_2_0; }
		
		//BA='&&'
		public EnumLiteralDeclaration getBAEnumLiteralDeclaration_3() { return cBAEnumLiteralDeclaration_3; }
		
		//'&&'
		public Keyword getBAAmpersandAmpersandKeyword_3_0() { return cBAAmpersandAmpersandKeyword_3_0; }
		
		//PLUS='+'
		public EnumLiteralDeclaration getPLUSEnumLiteralDeclaration_4() { return cPLUSEnumLiteralDeclaration_4; }
		
		//'+'
		public Keyword getPLUSPlusSignKeyword_4_0() { return cPLUSPlusSignKeyword_4_0; }
		
		//MINUS='-'
		public EnumLiteralDeclaration getMINUSEnumLiteralDeclaration_5() { return cMINUSEnumLiteralDeclaration_5; }
		
		//'-'
		public Keyword getMINUSHyphenMinusKeyword_5_0() { return cMINUSHyphenMinusKeyword_5_0; }
		
		//DIV='/'
		public EnumLiteralDeclaration getDIVEnumLiteralDeclaration_6() { return cDIVEnumLiteralDeclaration_6; }
		
		//'/'
		public Keyword getDIVSolidusKeyword_6_0() { return cDIVSolidusKeyword_6_0; }
		
		//MULT='*'
		public EnumLiteralDeclaration getMULTEnumLiteralDeclaration_7() { return cMULTEnumLiteralDeclaration_7; }
		
		//'*'
		public Keyword getMULTAsteriskKeyword_7_0() { return cMULTAsteriskKeyword_7_0; }
	}
	public class SCModifierElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.SCModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINITIALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINITIALInitialKeyword_0_0 = (Keyword)cINITIALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFINALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFINALFinalKeyword_1_0 = (Keyword)cFINALEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum SCModifier:
		//    INITIAL='initial' | FINAL='final'
		//;
		public EnumRule getRule() { return rule; }
		
		//INITIAL='initial' | FINAL='final'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INITIAL='initial'
		public EnumLiteralDeclaration getINITIALEnumLiteralDeclaration_0() { return cINITIALEnumLiteralDeclaration_0; }
		
		//'initial'
		public Keyword getINITIALInitialKeyword_0_0() { return cINITIALInitialKeyword_0_0; }
		
		//FINAL='final'
		public EnumLiteralDeclaration getFINALEnumLiteralDeclaration_1() { return cFINALEnumLiteralDeclaration_1; }
		
		//'final'
		public Keyword getFINALFinalKeyword_1_0() { return cFINALFinalKeyword_1_0; }
	}
	
	private final MontiArcAndCoreElements pMontiArcAndCore;
	private final ImportStatementsElements pImportStatements;
	private final PackageElements pPackage;
	private final TypeElements pType;
	private final MCPrimitiveTypeElements pMCPrimitiveType;
	private final MCObjectTypeElements pMCObjectType;
	private final MCVoidTypeElements pMCVoidType;
	private final MCCollectionTypeElements pMCCollectionType;
	private final MCArrayTypeElements pMCArrayType;
	private final ExpressionElements pExpression;
	private final LiteralExpressionElements pLiteralExpression;
	private final NumberLiteralElements pNumberLiteral;
	private final StringLiteralElements pStringLiteral;
	private final NameExpressionElements pNameExpression;
	private final BinaryExpressionElements pBinaryExpression;
	private final OperatorElements eOperator;
	private final ArgumentsElements pArguments;
	private final ArgumentElements pArgument;
	private final TerminalRule tMCQUALIFIEDNAME;
	private final TerminalRule tDOTSTAR;
	private final ClassDiagramCompilationUnitElements pClassDiagramCompilationUnit;
	private final ClassDiagramElements pClassDiagram;
	private final CDDefinitionElements pCDDefinition;
	private final CDClassElements pCDClass;
	private final CDEnumElements pCDEnum;
	private final MemberElements pMember;
	private final MACompilationUnitElements pMACompilationUnit;
	private final ComponentElements pComponent;
	private final SignatureElements pSignature;
	private final ParametersElements pParameters;
	private final ComponentTypeElements pComponentType;
	private final ParameterElements pParameter;
	private final ArcElementElements pArcElement;
	private final SubComponentElements pSubComponent;
	private final ConnectorElements pConnector;
	private final PortsElements pPorts;
	private final PortElements pPort;
	private final ConditionElements pCondition;
	private final NamesElements pNames;
	private final VariableElements pVariable;
	private final AutomatonElements pAutomaton;
	private final StateElements pState;
	private final SCStateElements pSCState;
	private final InvStateElements pInvState;
	private final SCSAnteElements pSCSAnte;
	private final SCModifierElements eSCModifier;
	private final TransitionElements pTransition;
	private final BlockElements pBlock;
	private final BlockStatementElements pBlockStatement;
	private final SimpleExpressionElements pSimpleExpression;
	private final SimpleInitElements pSimpleInit;
	private final TerminalRule tSYNC;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MontiArcAndCoreGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMontiArcAndCore = new MontiArcAndCoreElements();
		this.pImportStatements = new ImportStatementsElements();
		this.pPackage = new PackageElements();
		this.pType = new TypeElements();
		this.pMCPrimitiveType = new MCPrimitiveTypeElements();
		this.pMCObjectType = new MCObjectTypeElements();
		this.pMCVoidType = new MCVoidTypeElements();
		this.pMCCollectionType = new MCCollectionTypeElements();
		this.pMCArrayType = new MCArrayTypeElements();
		this.pExpression = new ExpressionElements();
		this.pLiteralExpression = new LiteralExpressionElements();
		this.pNumberLiteral = new NumberLiteralElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pNameExpression = new NameExpressionElements();
		this.pBinaryExpression = new BinaryExpressionElements();
		this.eOperator = new OperatorElements();
		this.pArguments = new ArgumentsElements();
		this.pArgument = new ArgumentElements();
		this.tMCQUALIFIEDNAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.MCQUALIFIEDNAME");
		this.tDOTSTAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.DOTSTAR");
		this.pClassDiagramCompilationUnit = new ClassDiagramCompilationUnitElements();
		this.pClassDiagram = new ClassDiagramElements();
		this.pCDDefinition = new CDDefinitionElements();
		this.pCDClass = new CDClassElements();
		this.pCDEnum = new CDEnumElements();
		this.pMember = new MemberElements();
		this.pMACompilationUnit = new MACompilationUnitElements();
		this.pComponent = new ComponentElements();
		this.pSignature = new SignatureElements();
		this.pParameters = new ParametersElements();
		this.pComponentType = new ComponentTypeElements();
		this.pParameter = new ParameterElements();
		this.pArcElement = new ArcElementElements();
		this.pSubComponent = new SubComponentElements();
		this.pConnector = new ConnectorElements();
		this.pPorts = new PortsElements();
		this.pPort = new PortElements();
		this.pCondition = new ConditionElements();
		this.pNames = new NamesElements();
		this.pVariable = new VariableElements();
		this.pAutomaton = new AutomatonElements();
		this.pState = new StateElements();
		this.pSCState = new SCStateElements();
		this.pInvState = new InvStateElements();
		this.pSCSAnte = new SCSAnteElements();
		this.eSCModifier = new SCModifierElements();
		this.pTransition = new TransitionElements();
		this.pBlock = new BlockElements();
		this.pBlockStatement = new BlockStatementElements();
		this.pSimpleExpression = new SimpleExpressionElements();
		this.pSimpleInit = new SimpleInitElements();
		this.tSYNC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore.SYNC");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.palladiosimulator.xtext.montiarcandcore.MontiArcAndCore".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MontiArcAndCore:
	//    classdiagram=ClassDiagramCompilationUnit
	//    montiarcdsl=MACompilationUnit;
	public MontiArcAndCoreElements getMontiArcAndCoreAccess() {
		return pMontiArcAndCore;
	}
	
	public ParserRule getMontiArcAndCoreRule() {
		return getMontiArcAndCoreAccess().getRule();
	}
	
	//ImportStatements:
	//    'import' importUri=MCQUALIFIEDNAME star?=DOTSTAR? ";"
	//;
	public ImportStatementsElements getImportStatementsAccess() {
		return pImportStatements;
	}
	
	public ParserRule getImportStatementsRule() {
		return getImportStatementsAccess().getRule();
	}
	
	//Package:
	//    'package' name=(MCQUALIFIEDNAME | ID)';'
	//;
	public PackageElements getPackageAccess() {
		return pPackage;
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}
	
	//Type:
	//    MCPrimitiveType | MCArrayType | MCObjectType | MCCollectionType
	//;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//MCPrimitiveType:
	//     type = ( 'boolean' | 'byte' | 'short' | 'int'
	//                  | 'long' | 'char' |'float' | 'double' )
	//;
	public MCPrimitiveTypeElements getMCPrimitiveTypeAccess() {
		return pMCPrimitiveType;
	}
	
	public ParserRule getMCPrimitiveTypeRule() {
		return getMCPrimitiveTypeAccess().getRule();
	}
	
	//MCObjectType:
	//    type = ( 'Boolean' | 'Byte' | 'Integer'
	//                  | 'Long' | 'Char' |'Double' | 'String' )
	//;
	public MCObjectTypeElements getMCObjectTypeAccess() {
		return pMCObjectType;
	}
	
	public ParserRule getMCObjectTypeRule() {
		return getMCObjectTypeAccess().getRule();
	}
	
	//MCVoidType:
	//    type = 'void'
	//;
	public MCVoidTypeElements getMCVoidTypeAccess() {
		return pMCVoidType;
	}
	
	public ParserRule getMCVoidTypeRule() {
		return getMCVoidTypeAccess().getRule();
	}
	
	//MCCollectionType:
	//    collection = ('Set' | 'List' | 'Map' | 'Optional') '<' innerType=Type '>'
	//;
	public MCCollectionTypeElements getMCCollectionTypeAccess() {
		return pMCCollectionType;
	}
	
	public ParserRule getMCCollectionTypeRule() {
		return getMCCollectionTypeAccess().getRule();
	}
	
	//MCArrayType:
	//    MCPrimitiveType'['']'
	//;
	public MCArrayTypeElements getMCArrayTypeAccess() {
		return pMCArrayType;
	}
	
	public ParserRule getMCArrayTypeRule() {
		return getMCArrayTypeAccess().getRule();
	}
	
	//Expression:
	//    NameExpression | LiteralExpression | BinaryExpression
	//;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//LiteralExpression:
	//    NumberLiteral | StringLiteral
	//;
	public LiteralExpressionElements getLiteralExpressionAccess() {
		return pLiteralExpression;
	}
	
	public ParserRule getLiteralExpressionRule() {
		return getLiteralExpressionAccess().getRule();
	}
	
	//NumberLiteral:
	//  literal=INT
	//;
	public NumberLiteralElements getNumberLiteralAccess() {
		return pNumberLiteral;
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}
	
	//StringLiteral:
	//    literal=STRING
	//;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//NameExpression:
	//    name=ID | qualifiedname=MCQUALIFIEDNAME
	//;
	public NameExpressionElements getNameExpressionAccess() {
		return pNameExpression;
	}
	
	public ParserRule getNameExpressionRule() {
		return getNameExpressionAccess().getRule();
	}
	
	//BinaryExpression:
	//    literal1 = (LiteralExpression|NameExpression) op=Operator literal2= (LiteralExpression|NameExpression)
	//;
	public BinaryExpressionElements getBinaryExpressionAccess() {
		return pBinaryExpression;
	}
	
	public ParserRule getBinaryExpressionRule() {
		return getBinaryExpressionAccess().getRule();
	}
	
	//enum Operator:
	//    GT='>'| LT='<' | EQ='==' | BA='&&' | PLUS='+' | MINUS='-' | DIV='/' | MULT='*'
	//;
	public OperatorElements getOperatorAccess() {
		return eOperator;
	}
	
	public EnumRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//Arguments:
	//    '(' arguments+=Argument (',' arguments+=Argument)* ')'
	//;
	public ArgumentsElements getArgumentsAccess() {
		return pArguments;
	}
	
	public ParserRule getArgumentsRule() {
		return getArgumentsAccess().getRule();
	}
	
	//Argument:
	//    name?=ID expression=Expression
	//;
	public ArgumentElements getArgumentAccess() {
		return pArgument;
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}
	
	//terminal MCQUALIFIEDNAME returns ecore::EString:
	//    ID ('.' ID)+
	//;
	public TerminalRule getMCQUALIFIEDNAMERule() {
		return tMCQUALIFIEDNAME;
	}
	
	//terminal DOTSTAR:
	//    '.*'
	//;
	public TerminalRule getDOTSTARRule() {
		return tDOTSTAR;
	}
	
	//ClassDiagramCompilationUnit:
	//    package=Package importStatements+=ImportStatements*
	//    diagram=ClassDiagram;
	public ClassDiagramCompilationUnitElements getClassDiagramCompilationUnitAccess() {
		return pClassDiagramCompilationUnit;
	}
	
	public ParserRule getClassDiagramCompilationUnitRule() {
		return getClassDiagramCompilationUnitAccess().getRule();
	}
	
	//// ClassDiagram Head
	//ClassDiagram:
	//    "classdiagram" name=ID
	//    "{" cdElements+=CDDefinition* "}"
	//;
	public ClassDiagramElements getClassDiagramAccess() {
		return pClassDiagram;
	}
	
	public ParserRule getClassDiagramRule() {
		return getClassDiagramAccess().getRule();
	}
	
	//CDDefinition:
	//    CDClass | CDEnum;
	public CDDefinitionElements getCDDefinitionAccess() {
		return pCDDefinition;
	}
	
	public ParserRule getCDDefinitionRule() {
		return getCDDefinitionAccess().getRule();
	}
	
	//// Class Diagram Body Elements
	//CDClass:
	//    (public?='public')? 'class' name=ID ('extends' extends=ID)? ('implements' implements+=ID (','implements+=ID)*)?'{'
	//        members+=Member*
	//    '}'
	//;
	public CDClassElements getCDClassAccess() {
		return pCDClass;
	}
	
	public ParserRule getCDClassRule() {
		return getCDClassAccess().getRule();
	}
	
	//CDEnum:
	//    (public?='public')? 'enum' name=ID '{'
	//        values+=ID
	//    '}'
	//;
	public CDEnumElements getCDEnumAccess() {
		return pCDEnum;
	}
	
	public ParserRule getCDEnumRule() {
		return getCDEnumAccess().getRule();
	}
	
	//Member:
	//    type=(Type|CDDefinition) name=ID ';'
	//;
	public MemberElements getMemberAccess() {
		return pMember;
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}
	
	//MACompilationUnit:
	//    package=Package importStatements+=ImportStatements*
	//    component=Component;
	public MACompilationUnitElements getMACompilationUnitAccess() {
		return pMACompilationUnit;
	}
	
	public ParserRule getMACompilationUnitRule() {
		return getMACompilationUnitAccess().getRule();
	}
	
	//// Component Head
	//Component:
	//    "component" name=ID //signature=Signature
	//    "{" arcElements+=ArcElement* "}"
	//;
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}
	
	//Signature:
	//    {Signature} parameters?=Parameters? ("extends" type?=Type)?;
	public SignatureElements getSignatureAccess() {
		return pSignature;
	}
	
	public ParserRule getSignatureRule() {
		return getSignatureAccess().getRule();
	}
	
	//Parameters:
	//    parameters+=Parameter ("," parameters+=Parameter)*;
	public ParametersElements getParametersAccess() {
		return pParameters;
	}
	
	public ParserRule getParametersRule() {
		return getParametersAccess().getRule();
	}
	
	//ComponentType:
	//    type = ([Component])
	//;
	public ComponentTypeElements getComponentTypeAccess() {
		return pComponentType;
	}
	
	public ParserRule getComponentTypeRule() {
		return getComponentTypeAccess().getRule();
	}
	
	//Parameter:
	//    type=Type name=ID ("=" expression?=Expression)?;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//ArcElement:
	//    Component | SubComponent | Connector | Port | Variable | Automaton;
	public ArcElementElements getArcElementAccess() {
		return pArcElement;
	}
	
	public ParserRule getArcElementRule() {
		return getArcElementAccess().getRule();
	}
	
	//// Component Body Elements
	//SubComponent:
	//    "component" type=Type arguments?=Arguments? instances=Names ";";
	public SubComponentElements getSubComponentAccess() {
		return pSubComponent;
	}
	
	public ParserRule getSubComponentRule() {
		return getSubComponentAccess().getRule();
	}
	
	//Connector:
	//    source=(ID|MCQUALIFIEDNAME) "->" target=(ID|MCQUALIFIEDNAME) ";";
	public ConnectorElements getConnectorAccess() {
		return pConnector;
	}
	
	public ParserRule getConnectorRule() {
		return getConnectorAccess().getRule();
	}
	
	//Ports:
	//    "port" ports+=Port ("," ports+=Port)* ";";
	public PortsElements getPortsAccess() {
		return pPorts;
	}
	
	public ParserRule getPortsRule() {
		return getPortsAccess().getRule();
	}
	
	//Port:
	//    "port" (condition=Condition)?(in?="in" | out?="out") (type=Type|dataType=([CDDefinition])) name=(ID|MCQUALIFIEDNAME) ";"
	//;
	public PortElements getPortAccess() {
		return pPort;
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}
	
	//Condition:
	//    '<<''condition' '=' condition=STRING '>>'
	//;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//Names:
	//    names+=(ID|MCQUALIFIEDNAME) ("," names+=(ID|MCQUALIFIEDNAME))*;
	public NamesElements getNamesAccess() {
		return pNames;
	}
	
	public ParserRule getNamesRule() {
		return getNamesAccess().getRule();
	}
	
	//Variable:
	//    type=([Component]) name=(ID|MCQUALIFIEDNAME) ";"
	//;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//// Embedded Behavior Elements
	////Variable:
	////    type=(Type|ComponentType) names?=Names? ('('parameters+=Expression(','parameters+=Expression)*')')?";";
	//Automaton:
	//    {Automaton} (sync?=SYNC)? "automaton" name?=ID? "{" (states+=State |
	//    transitions+=Transition)* "}";
	public AutomatonElements getAutomatonAccess() {
		return pAutomaton;
	}
	
	public ParserRule getAutomatonRule() {
		return getAutomatonAccess().getRule();
	}
	
	//State:
	//    SCState | InvState
	//;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//SCState:
	//    (modifier+=SCModifier)* (ante=SCSAnte)? "state" name=ID ";";
	public SCStateElements getSCStateAccess() {
		return pSCState;
	}
	
	public ParserRule getSCStateRule() {
		return getSCStateAccess().getRule();
	}
	
	//InvState:
	//    (modifier+=SCModifier)* "state" name=ID '[' expression=Expression ']'";";
	public InvStateElements getInvStateAccess() {
		return pInvState;
	}
	
	public ParserRule getInvStateRule() {
		return getInvStateAccess().getRule();
	}
	
	//SCSAnte:
	//    {SCSAnte} (block=Block)
	//;
	public SCSAnteElements getSCSAnteAccess() {
		return pSCSAnte;
	}
	
	public ParserRule getSCSAnteRule() {
		return getSCSAnteAccess().getRule();
	}
	
	//enum SCModifier:
	//    INITIAL='initial' | FINAL='final'
	//;
	public SCModifierElements getSCModifierAccess() {
		return eSCModifier;
	}
	
	public EnumRule getSCModifierRule() {
		return getSCModifierAccess().getRule();
	}
	
	//Transition:
	//    source=[State] ("->" target=[State])?
	//    ("[" expression=Expression "]")?("/" reaction=Block)?";";
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//Block:
	//    {Block} '{' blocks+=BlockStatement* '}';
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//BlockStatement:
	//    SimpleInit | SimpleExpression
	//;
	public BlockStatementElements getBlockStatementAccess() {
		return pBlockStatement;
	}
	
	public ParserRule getBlockStatementRule() {
		return getBlockStatementAccess().getRule();
	}
	
	//SimpleExpression:
	//    expression=Expression ';'
	//;
	public SimpleExpressionElements getSimpleExpressionAccess() {
		return pSimpleExpression;
	}
	
	public ParserRule getSimpleExpressionRule() {
		return getSimpleExpressionAccess().getRule();
	}
	
	//SimpleInit:
	//    name=ID "=" expressions+=Expression';'
	//;
	public SimpleInitElements getSimpleInitAccess() {
		return pSimpleInit;
	}
	
	public ParserRule getSimpleInitRule() {
		return getSimpleInitAccess().getRule();
	}
	
	//terminal SYNC:
	//    "<<sync>>"
	//;
	public TerminalRule getSYNCRule() {
		return tSYNC;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
