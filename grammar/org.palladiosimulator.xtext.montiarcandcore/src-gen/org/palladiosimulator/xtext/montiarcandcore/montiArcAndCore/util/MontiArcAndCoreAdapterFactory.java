/**
 * generated by Xtext 2.34.0
 */
package org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.ArcElement;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Argument;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Arguments;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Automaton;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.BinaryExpression;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Block;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.BlockStatement;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.CDClass;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.CDDefinition;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.CDEnum;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.ClassDiagram;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.ClassDiagramCompilationUnit;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Component;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.ComponentType;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Condition;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Connector;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Expression;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.ImportStatements;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.InvState;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.LiteralExpression;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.MACompilationUnit;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.MCArrayType;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.MCCollectionType;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.MCObjectType;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.MCPrimitiveType;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.MCVoidType;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Member;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.MontiArcAndCore;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.MontiArcAndCorePackage;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.NameExpression;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Names;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.NumberLiteral;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Parameter;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Parameters;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Port;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Ports;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.SCSAnte;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.SCState;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Signature;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.SimpleExpression;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.SimpleInit;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.State;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.StringLiteral;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.SubComponent;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Transition;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Type;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Variable;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.MontiArcAndCorePackage
 * @generated
 */
public class MontiArcAndCoreAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MontiArcAndCorePackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MontiArcAndCoreAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = MontiArcAndCorePackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MontiArcAndCoreSwitch<Adapter> modelSwitch =
    new MontiArcAndCoreSwitch<Adapter>()
    {
      @Override
      public Adapter caseMontiArcAndCore(MontiArcAndCore object)
      {
        return createMontiArcAndCoreAdapter();
      }
      @Override
      public Adapter caseImportStatements(ImportStatements object)
      {
        return createImportStatementsAdapter();
      }
      @Override
      public Adapter casePackage(org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Package object)
      {
        return createPackageAdapter();
      }
      @Override
      public Adapter caseType(Type object)
      {
        return createTypeAdapter();
      }
      @Override
      public Adapter caseMCPrimitiveType(MCPrimitiveType object)
      {
        return createMCPrimitiveTypeAdapter();
      }
      @Override
      public Adapter caseMCObjectType(MCObjectType object)
      {
        return createMCObjectTypeAdapter();
      }
      @Override
      public Adapter caseMCVoidType(MCVoidType object)
      {
        return createMCVoidTypeAdapter();
      }
      @Override
      public Adapter caseMCCollectionType(MCCollectionType object)
      {
        return createMCCollectionTypeAdapter();
      }
      @Override
      public Adapter caseMCArrayType(MCArrayType object)
      {
        return createMCArrayTypeAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter caseLiteralExpression(LiteralExpression object)
      {
        return createLiteralExpressionAdapter();
      }
      @Override
      public Adapter caseNumberLiteral(NumberLiteral object)
      {
        return createNumberLiteralAdapter();
      }
      @Override
      public Adapter caseStringLiteral(StringLiteral object)
      {
        return createStringLiteralAdapter();
      }
      @Override
      public Adapter caseNameExpression(NameExpression object)
      {
        return createNameExpressionAdapter();
      }
      @Override
      public Adapter caseBinaryExpression(BinaryExpression object)
      {
        return createBinaryExpressionAdapter();
      }
      @Override
      public Adapter caseArguments(Arguments object)
      {
        return createArgumentsAdapter();
      }
      @Override
      public Adapter caseArgument(Argument object)
      {
        return createArgumentAdapter();
      }
      @Override
      public Adapter caseClassDiagramCompilationUnit(ClassDiagramCompilationUnit object)
      {
        return createClassDiagramCompilationUnitAdapter();
      }
      @Override
      public Adapter caseClassDiagram(ClassDiagram object)
      {
        return createClassDiagramAdapter();
      }
      @Override
      public Adapter caseCDDefinition(CDDefinition object)
      {
        return createCDDefinitionAdapter();
      }
      @Override
      public Adapter caseCDClass(CDClass object)
      {
        return createCDClassAdapter();
      }
      @Override
      public Adapter caseCDEnum(CDEnum object)
      {
        return createCDEnumAdapter();
      }
      @Override
      public Adapter caseMember(Member object)
      {
        return createMemberAdapter();
      }
      @Override
      public Adapter caseMACompilationUnit(MACompilationUnit object)
      {
        return createMACompilationUnitAdapter();
      }
      @Override
      public Adapter caseComponent(Component object)
      {
        return createComponentAdapter();
      }
      @Override
      public Adapter caseSignature(Signature object)
      {
        return createSignatureAdapter();
      }
      @Override
      public Adapter caseParameters(Parameters object)
      {
        return createParametersAdapter();
      }
      @Override
      public Adapter caseComponentType(ComponentType object)
      {
        return createComponentTypeAdapter();
      }
      @Override
      public Adapter caseParameter(Parameter object)
      {
        return createParameterAdapter();
      }
      @Override
      public Adapter caseArcElement(ArcElement object)
      {
        return createArcElementAdapter();
      }
      @Override
      public Adapter caseSubComponent(SubComponent object)
      {
        return createSubComponentAdapter();
      }
      @Override
      public Adapter caseConnector(Connector object)
      {
        return createConnectorAdapter();
      }
      @Override
      public Adapter casePorts(Ports object)
      {
        return createPortsAdapter();
      }
      @Override
      public Adapter casePort(Port object)
      {
        return createPortAdapter();
      }
      @Override
      public Adapter caseCondition(Condition object)
      {
        return createConditionAdapter();
      }
      @Override
      public Adapter caseNames(Names object)
      {
        return createNamesAdapter();
      }
      @Override
      public Adapter caseVariable(Variable object)
      {
        return createVariableAdapter();
      }
      @Override
      public Adapter caseAutomaton(Automaton object)
      {
        return createAutomatonAdapter();
      }
      @Override
      public Adapter caseState(State object)
      {
        return createStateAdapter();
      }
      @Override
      public Adapter caseSCState(SCState object)
      {
        return createSCStateAdapter();
      }
      @Override
      public Adapter caseInvState(InvState object)
      {
        return createInvStateAdapter();
      }
      @Override
      public Adapter caseSCSAnte(SCSAnte object)
      {
        return createSCSAnteAdapter();
      }
      @Override
      public Adapter caseTransition(Transition object)
      {
        return createTransitionAdapter();
      }
      @Override
      public Adapter caseBlock(Block object)
      {
        return createBlockAdapter();
      }
      @Override
      public Adapter caseBlockStatement(BlockStatement object)
      {
        return createBlockStatementAdapter();
      }
      @Override
      public Adapter caseSimpleExpression(SimpleExpression object)
      {
        return createSimpleExpressionAdapter();
      }
      @Override
      public Adapter caseSimpleInit(SimpleInit object)
      {
        return createSimpleInitAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.MontiArcAndCore <em>Monti Arc And Core</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.MontiArcAndCore
   * @generated
   */
  public Adapter createMontiArcAndCoreAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.ImportStatements <em>Import Statements</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.ImportStatements
   * @generated
   */
  public Adapter createImportStatementsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Package <em>Package</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Package
   * @generated
   */
  public Adapter createPackageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Type <em>Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Type
   * @generated
   */
  public Adapter createTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.MCPrimitiveType <em>MC Primitive Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.MCPrimitiveType
   * @generated
   */
  public Adapter createMCPrimitiveTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.MCObjectType <em>MC Object Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.MCObjectType
   * @generated
   */
  public Adapter createMCObjectTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.MCVoidType <em>MC Void Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.MCVoidType
   * @generated
   */
  public Adapter createMCVoidTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.MCCollectionType <em>MC Collection Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.MCCollectionType
   * @generated
   */
  public Adapter createMCCollectionTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.MCArrayType <em>MC Array Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.MCArrayType
   * @generated
   */
  public Adapter createMCArrayTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.LiteralExpression <em>Literal Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.LiteralExpression
   * @generated
   */
  public Adapter createLiteralExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.NumberLiteral <em>Number Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.NumberLiteral
   * @generated
   */
  public Adapter createNumberLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.StringLiteral <em>String Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.StringLiteral
   * @generated
   */
  public Adapter createStringLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.NameExpression <em>Name Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.NameExpression
   * @generated
   */
  public Adapter createNameExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.BinaryExpression <em>Binary Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.BinaryExpression
   * @generated
   */
  public Adapter createBinaryExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Arguments <em>Arguments</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Arguments
   * @generated
   */
  public Adapter createArgumentsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Argument <em>Argument</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Argument
   * @generated
   */
  public Adapter createArgumentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.ClassDiagramCompilationUnit <em>Class Diagram Compilation Unit</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.ClassDiagramCompilationUnit
   * @generated
   */
  public Adapter createClassDiagramCompilationUnitAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.ClassDiagram <em>Class Diagram</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.ClassDiagram
   * @generated
   */
  public Adapter createClassDiagramAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.CDDefinition <em>CD Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.CDDefinition
   * @generated
   */
  public Adapter createCDDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.CDClass <em>CD Class</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.CDClass
   * @generated
   */
  public Adapter createCDClassAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.CDEnum <em>CD Enum</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.CDEnum
   * @generated
   */
  public Adapter createCDEnumAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Member <em>Member</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Member
   * @generated
   */
  public Adapter createMemberAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.MACompilationUnit <em>MA Compilation Unit</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.MACompilationUnit
   * @generated
   */
  public Adapter createMACompilationUnitAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Component <em>Component</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Component
   * @generated
   */
  public Adapter createComponentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Signature <em>Signature</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Signature
   * @generated
   */
  public Adapter createSignatureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Parameters <em>Parameters</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Parameters
   * @generated
   */
  public Adapter createParametersAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.ComponentType <em>Component Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.ComponentType
   * @generated
   */
  public Adapter createComponentTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Parameter <em>Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Parameter
   * @generated
   */
  public Adapter createParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.ArcElement <em>Arc Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.ArcElement
   * @generated
   */
  public Adapter createArcElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.SubComponent <em>Sub Component</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.SubComponent
   * @generated
   */
  public Adapter createSubComponentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Connector <em>Connector</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Connector
   * @generated
   */
  public Adapter createConnectorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Ports <em>Ports</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Ports
   * @generated
   */
  public Adapter createPortsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Port <em>Port</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Port
   * @generated
   */
  public Adapter createPortAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Condition <em>Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Condition
   * @generated
   */
  public Adapter createConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Names <em>Names</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Names
   * @generated
   */
  public Adapter createNamesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Variable <em>Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Variable
   * @generated
   */
  public Adapter createVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Automaton <em>Automaton</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Automaton
   * @generated
   */
  public Adapter createAutomatonAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.State <em>State</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.State
   * @generated
   */
  public Adapter createStateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.SCState <em>SC State</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.SCState
   * @generated
   */
  public Adapter createSCStateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.InvState <em>Inv State</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.InvState
   * @generated
   */
  public Adapter createInvStateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.SCSAnte <em>SCS Ante</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.SCSAnte
   * @generated
   */
  public Adapter createSCSAnteAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Transition <em>Transition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Transition
   * @generated
   */
  public Adapter createTransitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Block <em>Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Block
   * @generated
   */
  public Adapter createBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.BlockStatement <em>Block Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.BlockStatement
   * @generated
   */
  public Adapter createBlockStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.SimpleExpression <em>Simple Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.SimpleExpression
   * @generated
   */
  public Adapter createSimpleExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.SimpleInit <em>Simple Init</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.SimpleInit
   * @generated
   */
  public Adapter createSimpleInitAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //MontiArcAndCoreAdapterFactory
