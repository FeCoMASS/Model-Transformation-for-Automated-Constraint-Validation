/*
 * generated by Xtext 2.34.0
 */
package org.palladiosimulator.xtext.montiarcandcore.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Argument;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Arguments;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Automaton;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.BinaryExpression;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Block;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.CDClass;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.CDEnum;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.ClassDiagram;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.ClassDiagramCompilationUnit;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Component;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.ComponentType;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Condition;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Connector;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.ImportStatements;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.InvState;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.MACompilationUnit;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.MCCollectionType;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.MCObjectType;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.MCPrimitiveType;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.MCVoidType;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Member;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.MontiArcAndCore;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.MontiArcAndCorePackage;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.NameExpression;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Names;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.NumberLiteral;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Parameters;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Port;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Ports;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.SCSAnte;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.SCState;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Signature;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.SimpleExpression;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.SimpleInit;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.StringLiteral;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.SubComponent;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Transition;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Variable;
import org.palladiosimulator.xtext.montiarcandcore.services.MontiArcAndCoreGrammarAccess;

@SuppressWarnings("all")
public class MontiArcAndCoreSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MontiArcAndCoreGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MontiArcAndCorePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MontiArcAndCorePackage.ARGUMENT:
				sequence_Argument(context, (Argument) semanticObject); 
				return; 
			case MontiArcAndCorePackage.ARGUMENTS:
				sequence_Arguments(context, (Arguments) semanticObject); 
				return; 
			case MontiArcAndCorePackage.AUTOMATON:
				sequence_Automaton(context, (Automaton) semanticObject); 
				return; 
			case MontiArcAndCorePackage.BINARY_EXPRESSION:
				sequence_BinaryExpression(context, (BinaryExpression) semanticObject); 
				return; 
			case MontiArcAndCorePackage.BLOCK:
				sequence_Block(context, (Block) semanticObject); 
				return; 
			case MontiArcAndCorePackage.CD_CLASS:
				sequence_CDClass(context, (CDClass) semanticObject); 
				return; 
			case MontiArcAndCorePackage.CD_ENUM:
				sequence_CDEnum(context, (CDEnum) semanticObject); 
				return; 
			case MontiArcAndCorePackage.CLASS_DIAGRAM:
				sequence_ClassDiagram(context, (ClassDiagram) semanticObject); 
				return; 
			case MontiArcAndCorePackage.CLASS_DIAGRAM_COMPILATION_UNIT:
				sequence_ClassDiagramCompilationUnit(context, (ClassDiagramCompilationUnit) semanticObject); 
				return; 
			case MontiArcAndCorePackage.COMPONENT:
				sequence_Component(context, (Component) semanticObject); 
				return; 
			case MontiArcAndCorePackage.COMPONENT_TYPE:
				sequence_ComponentType(context, (ComponentType) semanticObject); 
				return; 
			case MontiArcAndCorePackage.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case MontiArcAndCorePackage.CONNECTOR:
				sequence_Connector(context, (Connector) semanticObject); 
				return; 
			case MontiArcAndCorePackage.IMPORT_STATEMENTS:
				sequence_ImportStatements(context, (ImportStatements) semanticObject); 
				return; 
			case MontiArcAndCorePackage.INV_STATE:
				sequence_InvState(context, (InvState) semanticObject); 
				return; 
			case MontiArcAndCorePackage.MA_COMPILATION_UNIT:
				sequence_MACompilationUnit(context, (MACompilationUnit) semanticObject); 
				return; 
			case MontiArcAndCorePackage.MC_COLLECTION_TYPE:
				sequence_MCCollectionType(context, (MCCollectionType) semanticObject); 
				return; 
			case MontiArcAndCorePackage.MC_OBJECT_TYPE:
				sequence_MCObjectType(context, (MCObjectType) semanticObject); 
				return; 
			case MontiArcAndCorePackage.MC_PRIMITIVE_TYPE:
				sequence_MCPrimitiveType(context, (MCPrimitiveType) semanticObject); 
				return; 
			case MontiArcAndCorePackage.MC_VOID_TYPE:
				sequence_MCVoidType(context, (MCVoidType) semanticObject); 
				return; 
			case MontiArcAndCorePackage.MEMBER:
				sequence_Member(context, (Member) semanticObject); 
				return; 
			case MontiArcAndCorePackage.MONTI_ARC_AND_CORE:
				sequence_MontiArcAndCore(context, (MontiArcAndCore) semanticObject); 
				return; 
			case MontiArcAndCorePackage.NAME_EXPRESSION:
				sequence_NameExpression(context, (NameExpression) semanticObject); 
				return; 
			case MontiArcAndCorePackage.NAMES:
				sequence_Names(context, (Names) semanticObject); 
				return; 
			case MontiArcAndCorePackage.NUMBER_LITERAL:
				sequence_NumberLiteral(context, (NumberLiteral) semanticObject); 
				return; 
			case MontiArcAndCorePackage.PACKAGE:
				sequence_Package(context, (org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Package) semanticObject); 
				return; 
			case MontiArcAndCorePackage.PARAMETER:
				sequence_Parameter(context, (org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Parameter) semanticObject); 
				return; 
			case MontiArcAndCorePackage.PARAMETERS:
				sequence_Parameters(context, (Parameters) semanticObject); 
				return; 
			case MontiArcAndCorePackage.PORT:
				sequence_Port(context, (Port) semanticObject); 
				return; 
			case MontiArcAndCorePackage.PORTS:
				sequence_Ports(context, (Ports) semanticObject); 
				return; 
			case MontiArcAndCorePackage.SCS_ANTE:
				sequence_SCSAnte(context, (SCSAnte) semanticObject); 
				return; 
			case MontiArcAndCorePackage.SC_STATE:
				sequence_SCState(context, (SCState) semanticObject); 
				return; 
			case MontiArcAndCorePackage.SIGNATURE:
				sequence_Signature(context, (Signature) semanticObject); 
				return; 
			case MontiArcAndCorePackage.SIMPLE_EXPRESSION:
				sequence_SimpleExpression(context, (SimpleExpression) semanticObject); 
				return; 
			case MontiArcAndCorePackage.SIMPLE_INIT:
				sequence_SimpleInit(context, (SimpleInit) semanticObject); 
				return; 
			case MontiArcAndCorePackage.STRING_LITERAL:
				sequence_StringLiteral(context, (StringLiteral) semanticObject); 
				return; 
			case MontiArcAndCorePackage.SUB_COMPONENT:
				sequence_SubComponent(context, (SubComponent) semanticObject); 
				return; 
			case MontiArcAndCorePackage.TRANSITION:
				sequence_Transition(context, (Transition) semanticObject); 
				return; 
			case MontiArcAndCorePackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Argument returns Argument
	 *
	 * Constraint:
	 *     (name?=ID expression=Expression)
	 * </pre>
	 */
	protected void sequence_Argument(ISerializationContext context, Argument semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MontiArcAndCorePackage.Literals.ARGUMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MontiArcAndCorePackage.Literals.ARGUMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, MontiArcAndCorePackage.Literals.ARGUMENT__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MontiArcAndCorePackage.Literals.ARGUMENT__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getArgumentAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.isName());
		feeder.accept(grammarAccess.getArgumentAccess().getExpressionExpressionParserRuleCall_1_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Arguments returns Arguments
	 *
	 * Constraint:
	 *     (arguments+=Argument arguments+=Argument*)
	 * </pre>
	 */
	protected void sequence_Arguments(ISerializationContext context, Arguments semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ArcElement returns Automaton
	 *     Automaton returns Automaton
	 *
	 * Constraint:
	 *     (sync?=SYNC? name?=ID? (states+=State | transitions+=Transition)*)
	 * </pre>
	 */
	protected void sequence_Automaton(ISerializationContext context, Automaton semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns BinaryExpression
	 *     BinaryExpression returns BinaryExpression
	 *
	 * Constraint:
	 *     ((literal1=LiteralExpression | literal1=NameExpression) op=Operator (literal2=LiteralExpression | literal2=NameExpression))
	 * </pre>
	 */
	protected void sequence_BinaryExpression(ISerializationContext context, BinaryExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Block returns Block
	 *
	 * Constraint:
	 *     blocks+=BlockStatement*
	 * </pre>
	 */
	protected void sequence_Block(ISerializationContext context, Block semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     CDDefinition returns CDClass
	 *     CDClass returns CDClass
	 *
	 * Constraint:
	 *     (public?='public'? name=ID extends=ID? (implements+=ID implements+=ID*)? members+=Member)
	 * </pre>
	 */
	protected void sequence_CDClass(ISerializationContext context, CDClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     CDDefinition returns CDEnum
	 *     CDEnum returns CDEnum
	 *
	 * Constraint:
	 *     (public?='public'? name=ID values+=ID)
	 * </pre>
	 */
	protected void sequence_CDEnum(ISerializationContext context, CDEnum semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ClassDiagramCompilationUnit returns ClassDiagramCompilationUnit
	 *
	 * Constraint:
	 *     (package=Package importStatements+=ImportStatements* diagram=ClassDiagram)
	 * </pre>
	 */
	protected void sequence_ClassDiagramCompilationUnit(ISerializationContext context, ClassDiagramCompilationUnit semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ClassDiagram returns ClassDiagram
	 *
	 * Constraint:
	 *     (name=ID cdElements+=CDDefinition*)
	 * </pre>
	 */
	protected void sequence_ClassDiagram(ISerializationContext context, ClassDiagram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ComponentType returns ComponentType
	 *
	 * Constraint:
	 *     type=[Component|ID]
	 * </pre>
	 */
	protected void sequence_ComponentType(ISerializationContext context, ComponentType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MontiArcAndCorePackage.Literals.COMPONENT_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MontiArcAndCorePackage.Literals.COMPONENT_TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComponentTypeAccess().getTypeComponentIDTerminalRuleCall_0_1(), semanticObject.eGet(MontiArcAndCorePackage.Literals.COMPONENT_TYPE__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Component returns Component
	 *     ArcElement returns Component
	 *
	 * Constraint:
	 *     (name=ID arcElements+=ArcElement*)
	 * </pre>
	 */
	protected void sequence_Component(ISerializationContext context, Component semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Condition returns Condition
	 *
	 * Constraint:
	 *     condition=STRING
	 * </pre>
	 */
	protected void sequence_Condition(ISerializationContext context, Condition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MontiArcAndCorePackage.Literals.CONDITION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MontiArcAndCorePackage.Literals.CONDITION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConditionAccess().getConditionSTRINGTerminalRuleCall_3_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ArcElement returns Connector
	 *     Connector returns Connector
	 *
	 * Constraint:
	 *     ((source=ID | source=MCQUALIFIEDNAME) (target=ID | target=MCQUALIFIEDNAME))
	 * </pre>
	 */
	protected void sequence_Connector(ISerializationContext context, Connector semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ImportStatements returns ImportStatements
	 *
	 * Constraint:
	 *     (importUri=MCQUALIFIEDNAME star?=DOTSTAR?)
	 * </pre>
	 */
	protected void sequence_ImportStatements(ISerializationContext context, ImportStatements semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     State returns InvState
	 *     InvState returns InvState
	 *
	 * Constraint:
	 *     (modifier+=SCModifier* name=ID expression=Expression)
	 * </pre>
	 */
	protected void sequence_InvState(ISerializationContext context, InvState semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MACompilationUnit returns MACompilationUnit
	 *
	 * Constraint:
	 *     (package=Package importStatements+=ImportStatements* component=Component)
	 * </pre>
	 */
	protected void sequence_MACompilationUnit(ISerializationContext context, MACompilationUnit semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Type returns MCCollectionType
	 *     MCCollectionType returns MCCollectionType
	 *
	 * Constraint:
	 *     ((collection='Set' | collection='List' | collection='Map' | collection='Optional') innerType=Type)
	 * </pre>
	 */
	protected void sequence_MCCollectionType(ISerializationContext context, MCCollectionType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Type returns MCObjectType
	 *     MCObjectType returns MCObjectType
	 *
	 * Constraint:
	 *     (
	 *         type='Boolean' | 
	 *         type='Byte' | 
	 *         type='Integer' | 
	 *         type='Long' | 
	 *         type='Char' | 
	 *         type='Double' | 
	 *         type='String'
	 *     )
	 * </pre>
	 */
	protected void sequence_MCObjectType(ISerializationContext context, MCObjectType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Type returns MCPrimitiveType
	 *     MCPrimitiveType returns MCPrimitiveType
	 *     MCArrayType returns MCPrimitiveType
	 *
	 * Constraint:
	 *     (
	 *         type='boolean' | 
	 *         type='byte' | 
	 *         type='short' | 
	 *         type='int' | 
	 *         type='long' | 
	 *         type='char' | 
	 *         type='float' | 
	 *         type='double'
	 *     )
	 * </pre>
	 */
	protected void sequence_MCPrimitiveType(ISerializationContext context, MCPrimitiveType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MCVoidType returns MCVoidType
	 *
	 * Constraint:
	 *     type='void'
	 * </pre>
	 */
	protected void sequence_MCVoidType(ISerializationContext context, MCVoidType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MontiArcAndCorePackage.Literals.MC_VOID_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MontiArcAndCorePackage.Literals.MC_VOID_TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMCVoidTypeAccess().getTypeVoidKeyword_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Member returns Member
	 *
	 * Constraint:
	 *     ((type=Type | type=CDDefinition) name=ID)
	 * </pre>
	 */
	protected void sequence_Member(ISerializationContext context, Member semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MontiArcAndCore returns MontiArcAndCore
	 *
	 * Constraint:
	 *     (classdiagram=ClassDiagramCompilationUnit montiarcdsl=MACompilationUnit)
	 * </pre>
	 */
	protected void sequence_MontiArcAndCore(ISerializationContext context, MontiArcAndCore semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MontiArcAndCorePackage.Literals.MONTI_ARC_AND_CORE__CLASSDIAGRAM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MontiArcAndCorePackage.Literals.MONTI_ARC_AND_CORE__CLASSDIAGRAM));
			if (transientValues.isValueTransient(semanticObject, MontiArcAndCorePackage.Literals.MONTI_ARC_AND_CORE__MONTIARCDSL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MontiArcAndCorePackage.Literals.MONTI_ARC_AND_CORE__MONTIARCDSL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMontiArcAndCoreAccess().getClassdiagramClassDiagramCompilationUnitParserRuleCall_0_0(), semanticObject.getClassdiagram());
		feeder.accept(grammarAccess.getMontiArcAndCoreAccess().getMontiarcdslMACompilationUnitParserRuleCall_1_0(), semanticObject.getMontiarcdsl());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns NameExpression
	 *     NameExpression returns NameExpression
	 *
	 * Constraint:
	 *     (name=ID | qualifiedname=MCQUALIFIEDNAME)
	 * </pre>
	 */
	protected void sequence_NameExpression(ISerializationContext context, NameExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Names returns Names
	 *
	 * Constraint:
	 *     ((names+=ID | names+=MCQUALIFIEDNAME) names+=ID? (names+=MCQUALIFIEDNAME? names+=ID?)*)
	 * </pre>
	 */
	protected void sequence_Names(ISerializationContext context, Names semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns NumberLiteral
	 *     LiteralExpression returns NumberLiteral
	 *     NumberLiteral returns NumberLiteral
	 *
	 * Constraint:
	 *     literal=INT
	 * </pre>
	 */
	protected void sequence_NumberLiteral(ISerializationContext context, NumberLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MontiArcAndCorePackage.Literals.NUMBER_LITERAL__LITERAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MontiArcAndCorePackage.Literals.NUMBER_LITERAL__LITERAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumberLiteralAccess().getLiteralINTTerminalRuleCall_0(), semanticObject.getLiteral());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Package returns Package
	 *
	 * Constraint:
	 *     (name=MCQUALIFIEDNAME | name=ID)
	 * </pre>
	 */
	protected void sequence_Package(ISerializationContext context, org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Package semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     (type=Type name=ID expression?=Expression?)
	 * </pre>
	 */
	protected void sequence_Parameter(ISerializationContext context, org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Parameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Parameters returns Parameters
	 *
	 * Constraint:
	 *     (parameters+=Parameter parameters+=Parameter*)
	 * </pre>
	 */
	protected void sequence_Parameters(ISerializationContext context, Parameters semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ArcElement returns Port
	 *     Port returns Port
	 *
	 * Constraint:
	 *     (condition=Condition? (in?='in' | out?='out') (type=Type | dataType=[CDDefinition|ID]) (name=ID | name=MCQUALIFIEDNAME))
	 * </pre>
	 */
	protected void sequence_Port(ISerializationContext context, Port semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Ports returns Ports
	 *
	 * Constraint:
	 *     (ports+=Port ports+=Port*)
	 * </pre>
	 */
	protected void sequence_Ports(ISerializationContext context, Ports semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SCSAnte returns SCSAnte
	 *
	 * Constraint:
	 *     block=Block
	 * </pre>
	 */
	protected void sequence_SCSAnte(ISerializationContext context, SCSAnte semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MontiArcAndCorePackage.Literals.SCS_ANTE__BLOCK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MontiArcAndCorePackage.Literals.SCS_ANTE__BLOCK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSCSAnteAccess().getBlockBlockParserRuleCall_1_0(), semanticObject.getBlock());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     State returns SCState
	 *     SCState returns SCState
	 *
	 * Constraint:
	 *     (modifier+=SCModifier* ante=SCSAnte? name=ID)
	 * </pre>
	 */
	protected void sequence_SCState(ISerializationContext context, SCState semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Signature returns Signature
	 *
	 * Constraint:
	 *     (parameters?=Parameters? type?=Type?)
	 * </pre>
	 */
	protected void sequence_Signature(ISerializationContext context, Signature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BlockStatement returns SimpleExpression
	 *     SimpleExpression returns SimpleExpression
	 *
	 * Constraint:
	 *     expression=Expression
	 * </pre>
	 */
	protected void sequence_SimpleExpression(ISerializationContext context, SimpleExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MontiArcAndCorePackage.Literals.SIMPLE_EXPRESSION__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MontiArcAndCorePackage.Literals.SIMPLE_EXPRESSION__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSimpleExpressionAccess().getExpressionExpressionParserRuleCall_0_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BlockStatement returns SimpleInit
	 *     SimpleInit returns SimpleInit
	 *
	 * Constraint:
	 *     (name=ID expressions+=Expression)
	 * </pre>
	 */
	protected void sequence_SimpleInit(ISerializationContext context, SimpleInit semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns StringLiteral
	 *     LiteralExpression returns StringLiteral
	 *     StringLiteral returns StringLiteral
	 *
	 * Constraint:
	 *     literal=STRING
	 * </pre>
	 */
	protected void sequence_StringLiteral(ISerializationContext context, StringLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MontiArcAndCorePackage.Literals.STRING_LITERAL__LITERAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MontiArcAndCorePackage.Literals.STRING_LITERAL__LITERAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringLiteralAccess().getLiteralSTRINGTerminalRuleCall_0(), semanticObject.getLiteral());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ArcElement returns SubComponent
	 *     SubComponent returns SubComponent
	 *
	 * Constraint:
	 *     (type=Type arguments?=Arguments? instances=Names)
	 * </pre>
	 */
	protected void sequence_SubComponent(ISerializationContext context, SubComponent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Transition returns Transition
	 *
	 * Constraint:
	 *     (source=[State|ID] target=[State|ID]? expression=Expression? reaction=Block?)
	 * </pre>
	 */
	protected void sequence_Transition(ISerializationContext context, Transition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ArcElement returns Variable
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     (type=[Component|ID] (name=ID | name=MCQUALIFIEDNAME))
	 * </pre>
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
