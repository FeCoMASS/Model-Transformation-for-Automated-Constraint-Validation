/**
 * generated by Xtext 2.34.0
 */
package org.palladiosimulator.xtext.montiarcandcore.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.ArcElement;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.CDClass;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.CDDefinition;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.ClassDiagram;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.ClassDiagramCompilationUnit;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Component;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.ImportStatements;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.MACompilationUnit;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.MCCollectionType;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Member;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.MontiArcAndCore;
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Type;
import org.palladiosimulator.xtext.montiarcandcore.services.MontiArcAndCoreGrammarAccess;

@SuppressWarnings("all")
public class MontiArcAndCoreFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MontiArcAndCoreGrammarAccess _montiArcAndCoreGrammarAccess;

  protected void _format(final MontiArcAndCore montiArcAndCore, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(this.textRegionExtensions.allRegionsFor(montiArcAndCore).keyword(";"), _function);
    document.<ClassDiagramCompilationUnit>format(montiArcAndCore.getClassdiagram());
    document.<MACompilationUnit>format(montiArcAndCore.getMontiarcdsl());
  }

  protected void _format(final ClassDiagramCompilationUnit classDiagramCompilationUnit, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(this.textRegionExtensions.allRegionsFor(classDiagramCompilationUnit).keyword(";"), _function);
    document.<org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Package>format(classDiagramCompilationUnit.getPackage());
    document.<ClassDiagram>format(classDiagramCompilationUnit.getDiagram());
  }

  protected void _format(final org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Package packageDecl, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(this.textRegionExtensions.allRegionsFor(packageDecl).keyword(";"), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Package>append(packageDecl, _function_1);
  }

  protected void _format(final ClassDiagram classDiagram, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(this.textRegionExtensions.allRegionsFor(classDiagram).keyword(";"), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(
      document.append(this.textRegionExtensions.regionFor(classDiagram).keyword("{"), _function_1), 
      document.prepend(document.append(this.textRegionExtensions.regionFor(classDiagram).keyword("}"), _function_2), _function_3), _function_4);
    EList<CDDefinition> _cdElements = classDiagram.getCdElements();
    for (final CDDefinition cdClass : _cdElements) {
      this.format(cdClass, document);
    }
  }

  protected void _format(final CDClass cDClass, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(this.textRegionExtensions.allRegionsFor(cDClass).keyword(";"), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(
      document.append(this.textRegionExtensions.regionFor(cDClass).keyword("{"), _function_1), 
      document.prepend(document.append(this.textRegionExtensions.regionFor(cDClass).keyword("}"), _function_2), _function_3), _function_4);
    EList<Member> _members = cDClass.getMembers();
    for (final Member member : _members) {
      this.format(member, document);
    }
  }

  protected void _format(final Member member, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(this.textRegionExtensions.allRegionsFor(member).keyword(";"), _function);
  }

  protected void _format(final MACompilationUnit mACompilationUnit, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(this.textRegionExtensions.allRegionsFor(mACompilationUnit).keyword(";"), _function);
    document.<org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Package>format(mACompilationUnit.getPackage());
    EList<ImportStatements> _importStatements = mACompilationUnit.getImportStatements();
    for (final ImportStatements importStatement : _importStatements) {
      this.format(importStatement, document);
    }
    this.format(mACompilationUnit.getComponent(), document);
  }

  protected void _format(final ImportStatements importStatements, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(this.textRegionExtensions.allRegionsFor(importStatements).keyword(";"), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<ImportStatements>append(importStatements, _function_1);
  }

  protected void _format(final Component component, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(this.textRegionExtensions.allRegionsFor(component).keyword(";"), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(
      document.append(this.textRegionExtensions.regionFor(component).keyword("{"), _function_1), 
      document.prepend(document.append(this.textRegionExtensions.regionFor(component).keyword("}"), _function_2), _function_3), _function_4);
    EList<ArcElement> _arcElements = component.getArcElements();
    for (final ArcElement arcElement : _arcElements) {
      this.format(arcElement, document);
    }
  }

  protected void _format(final ArcElement arcElement, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(this.textRegionExtensions.allRegionsFor(arcElement).keyword(";"), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<ArcElement>append(arcElement, _function_1);
  }

  protected void _format(final MCCollectionType mCCollectionType, @Extension final IFormattableDocument document) {
    document.<Type>format(mCCollectionType.getInnerType());
  }

  public void format(final Object cDClass, final IFormattableDocument document) {
    if (cDClass instanceof XtextResource) {
      _format((XtextResource)cDClass, document);
      return;
    } else if (cDClass instanceof CDClass) {
      _format((CDClass)cDClass, document);
      return;
    } else if (cDClass instanceof Component) {
      _format((Component)cDClass, document);
      return;
    } else if (cDClass instanceof MCCollectionType) {
      _format((MCCollectionType)cDClass, document);
      return;
    } else if (cDClass instanceof ArcElement) {
      _format((ArcElement)cDClass, document);
      return;
    } else if (cDClass instanceof ClassDiagram) {
      _format((ClassDiagram)cDClass, document);
      return;
    } else if (cDClass instanceof ClassDiagramCompilationUnit) {
      _format((ClassDiagramCompilationUnit)cDClass, document);
      return;
    } else if (cDClass instanceof ImportStatements) {
      _format((ImportStatements)cDClass, document);
      return;
    } else if (cDClass instanceof MACompilationUnit) {
      _format((MACompilationUnit)cDClass, document);
      return;
    } else if (cDClass instanceof Member) {
      _format((Member)cDClass, document);
      return;
    } else if (cDClass instanceof MontiArcAndCore) {
      _format((MontiArcAndCore)cDClass, document);
      return;
    } else if (cDClass instanceof org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Package) {
      _format((org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Package)cDClass, document);
      return;
    } else if (cDClass instanceof EObject) {
      _format((EObject)cDClass, document);
      return;
    } else if (cDClass == null) {
      _format((Void)null, document);
      return;
    } else if (cDClass != null) {
      _format(cDClass, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(cDClass, document).toString());
    }
  }
}
