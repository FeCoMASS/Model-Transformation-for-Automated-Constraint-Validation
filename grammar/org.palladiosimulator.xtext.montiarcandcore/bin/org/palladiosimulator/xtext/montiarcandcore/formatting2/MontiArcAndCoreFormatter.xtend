/*
 * generated by Xtext 2.34.0
 */
package org.palladiosimulator.xtext.montiarcandcore.formatting2

import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.ArcElement
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.CDClass
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.ClassDiagram
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.ClassDiagramCompilationUnit
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Component
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.ImportStatements
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.MACompilationUnit
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.MCCollectionType
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Member
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.MontiArcAndCore
import org.palladiosimulator.xtext.montiarcandcore.montiArcAndCore.Package
import org.palladiosimulator.xtext.montiarcandcore.services.MontiArcAndCoreGrammarAccess

class MontiArcAndCoreFormatter extends AbstractFormatter2 {
	
	@Inject extension MontiArcAndCoreGrammarAccess

	def dispatch void format(MontiArcAndCore montiArcAndCore, extension IFormattableDocument document) {
		montiArcAndCore.allRegionsFor.keyword(";").prepend[noSpace]
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc.
		montiArcAndCore.classdiagram.format
		montiArcAndCore.montiarcdsl.format
	}
	
	def dispatch void format(ClassDiagramCompilationUnit classDiagramCompilationUnit, extension IFormattableDocument document) {
		classDiagramCompilationUnit.allRegionsFor.keyword(";").prepend[noSpace]
		classDiagramCompilationUnit.package.format
		classDiagramCompilationUnit.diagram.format
	}
	
	def dispatch void format(Package packageDecl, extension IFormattableDocument document) {
		packageDecl.allRegionsFor.keyword(";").prepend[noSpace]
		packageDecl.append[newLine]
	}
	
	def dispatch void format(ClassDiagram classDiagram, extension IFormattableDocument document) {
		classDiagram.allRegionsFor.keyword(";").prepend[noSpace]
	    interior(
	        classDiagram.regionFor.keyword('{').append[newLine],
	        classDiagram.regionFor.keyword('}').append[newLine].prepend[newLine],
	        [indent]
    	)
    	for (cdClass : classDiagram.cdElements) {
    		format(cdClass, document)
    	}
	}
	
	def dispatch void format(CDClass cDClass, extension IFormattableDocument document) {
		cDClass.allRegionsFor.keyword(";").prepend[noSpace]
		interior(
	        cDClass.regionFor.keyword('{').append[newLine],
	        cDClass.regionFor.keyword('}').append[newLine].prepend[newLine],
	        [indent]
    	)
    	for (member : cDClass.members) {
    		format(member, document)
    	}
	}
	
	def dispatch void format(Member member, extension IFormattableDocument document) {
		member.allRegionsFor.keyword(";").prepend[noSpace]
	}
	
	def dispatch void format(MACompilationUnit mACompilationUnit, extension IFormattableDocument document) {
		mACompilationUnit.allRegionsFor.keyword(";").prepend[noSpace]
		mACompilationUnit.package.format
		for (importStatement : mACompilationUnit.importStatements) {
    		format(importStatement, document)
    	}
    	format(mACompilationUnit.component, document)
	}
	
	def dispatch void format(ImportStatements importStatements, extension IFormattableDocument document) {
		importStatements.allRegionsFor.keyword(";").prepend[noSpace]
		importStatements.append[newLine]
	}
	
	def dispatch void format(Component component, extension IFormattableDocument document) {
		component.allRegionsFor.keyword(";").prepend[noSpace]
		interior(
	        component.regionFor.keyword('{').append[newLine],
	        component.regionFor.keyword('}').append[newLine].prepend[newLine],
	        [indent]
    	)
    	for (arcElement : component.arcElements) {
    		format(arcElement, document)
    	}
	}
	
	def dispatch void format(ArcElement arcElement, extension IFormattableDocument document) {
		arcElement.allRegionsFor.keyword(";").prepend[noSpace]
		arcElement.append[newLine]
	}

	def dispatch void format(MCCollectionType mCCollectionType, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		mCCollectionType.innerType.format
	}
	
	// TODO: implement for BinaryExpression, Arguments, Argument, ClassDiagramCompilationUnit, ClassDiagram, CDClass, Member, MACompilationUnit, Component, Parameters, Parameter, SubComponent, Ports, Port, Automaton, SCState, InvState, SCSAnte, Transition, Block, SimpleExpression, SimpleInit
}
